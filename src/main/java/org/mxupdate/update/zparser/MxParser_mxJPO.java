/* MxParser.java */
/* Generated By:JavaCC: Do not edit this line. MxParser.java */
/*
 *  This file is part of MxUpdate <http://www.mxupdate.org>.
 *
 *  MxUpdate is a deployment tool for a PLM platform to handle
 *  administration objects as single update files (configuration item).
 *
 *  Copyright (C) 2008-2016 The MxUpdate Team - All Rights Reserved
 *
 *  You may use, distribute and modify MxUpdate under the terms of the
 *  MxUpdate license. You should have received a copy of the MxUpdate
 *  license with this file. If not, please write to <info@mxupdate.org>,
 *  or visit <www.mxupdate.org>.
 *
 */

package org.mxupdate.update.zparser;

import java.lang.reflect.InvocationTargetException;
import java.util.Set;
import java.util.HashSet;

import org.mxupdate.update.BusObject_mxJPO;
import org.mxupdate.update.datamodel.AttributeCI_mxJPO;
import org.mxupdate.update.datamodel.Dimension_mxJPO;
import org.mxupdate.update.datamodel.Expression_mxJPO;
import org.mxupdate.update.datamodel.Format_mxJPO;
import org.mxupdate.update.datamodel.Interface_mxJPO;
import org.mxupdate.update.datamodel.PathType_mxJPO;
import org.mxupdate.update.datamodel.Policy_mxJPO;
import org.mxupdate.update.datamodel.Relationship_mxJPO;
import org.mxupdate.update.datamodel.Rule_mxJPO;
import org.mxupdate.update.datamodel.Type_mxJPO;
import org.mxupdate.update.datamodel.helper.AccessList_mxJPO.Access;
import org.mxupdate.update.datamodel.helper.LocalAttributeList_mxJPO.LocalAttribute;
import org.mxupdate.update.datamodel.helper.LocalPathTypeList_mxJPO.LocalPathType;
import org.mxupdate.update.datamodel.helper.TriggerList_mxJPO.Trigger;
import org.mxupdate.update.program.Page_mxJPO;
import org.mxupdate.update.program.ProgramCI_mxJPO;
import org.mxupdate.update.system.IndexCI_mxJPO;
import org.mxupdate.update.system.PackageCI_mxJPO;
import org.mxupdate.update.system.UniqueKeyCI_mxJPO;
import org.mxupdate.update.user.Association_mxJPO;
import org.mxupdate.update.user.Group_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO;
import org.mxupdate.update.user.PersonCI_mxJPO.TypeItem;
import org.mxupdate.update.user.Role_mxJPO;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.ExpressionType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.AbstractField.SortType;
import org.mxupdate.update.userinterface.AbstractUIWithFields_mxJPO.Setting;
import org.mxupdate.update.userinterface.Channel_mxJPO;
import org.mxupdate.update.userinterface.Command_mxJPO;
import org.mxupdate.update.userinterface.Form_mxJPO;
import org.mxupdate.update.userinterface.Inquiry_mxJPO;
import org.mxupdate.update.userinterface.Menu_mxJPO;
import org.mxupdate.update.userinterface.Portal_mxJPO;
import org.mxupdate.update.userinterface.Table_mxJPO;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.AbstractRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.ChannelRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.CommandRef;
import org.mxupdate.update.userinterface.helper.ChildRefList_mxJPO.MenuRef;
import org.mxupdate.update.util.AbstractParser_mxJPO;
import org.mxupdate.update.util.AdminPropertyList_mxJPO.AdminProperty;

/**
 * Parses the update format for {@link Channel_mxJPO}.
 */
@SuppressWarnings({"unused", "unchecked"})
public class MxParser_mxJPO
    extends AbstractParser_mxJPO implements MxParserConstants_mxJPO {

  final public String stringString() throws ParseException {Token tmp;
    String ret = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_STRING_STRING:{
      tmp = jj_consume_token(STRING_STRING_STRING);
ret = this.getString(tmp.image);
      break;
      }
    case STRING_STRING_SINGLE:{
      tmp = jj_consume_token(STRING_STRING_SINGLE);
ret = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public String string() throws ParseException {Token tmp;
    String ret = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      tmp = jj_consume_token(STRING);
ret = this.getString(tmp.image);
      break;
      }
    case SINGLE_STRING:{
      tmp = jj_consume_token(SINGLE_STRING);
ret = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public String multiLineString() throws ParseException {Token tmp;
    String ret = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      tmp = jj_consume_token(STRING);
ret = this.getString(tmp.image);
      break;
      }
    case SINGLE_STRING:{
      tmp = jj_consume_token(SINGLE_STRING);
ret = this.getString(tmp.image);
      break;
      }
    case MULTILINESTRING:{
      tmp = jj_consume_token(MULTILINESTRING);
ret = this.getString(tmp.image);
      break;
      }
    case MULTILINESINGLE:{
      tmp = jj_consume_token(MULTILINESINGLE);
ret = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Integer naturalNumber() throws ParseException {Token tmp;
    tmp = jj_consume_token(NATURALNUMBER);
{if ("" != null) return Integer.valueOf(tmp.image);}
    throw new Error("Missing return statement in function");
  }

  final public AdminProperty uuidProperty() throws ParseException {String str;
    AdminProperty property = new AdminProperty();
    str = string();
this.setValue(property, "value", str);
this.setValue(property, "name",  "UUID");
{if ("" != null) return property;}
    throw new Error("Missing return statement in function");
  }

  final public AdminProperty settingProperty() throws ParseException {String name, value;
    Token tmp;
    AdminProperty property = new AdminProperty();
    name = stringString();
    value = string();
this.setValue(property, "name", "%" + name);
this.setValue(property, "value", value);
{if ("" != null) return property;}
    throw new Error("Missing return statement in function");
  }

  final public AdminProperty property() throws ParseException {String str1,str2;
    Token tmp;
    AdminProperty property = new AdminProperty();
    str1 = string();
this.setValue(property, "name", str1);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TO:
      case PROPERTYVAL:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PROPERTYVAL:{
        jj_consume_token(PROPERTYVAL);
        str1 = string();
this.setValue(property, "value", str1);
        break;
        }
      case TO:{
        jj_consume_token(TO);
token_source.SwitchTo(STRING_STRING_EXPECTED);
        str1 = stringString();
        str2 = string();
this.setValue(property, "refAdminType", str1);this.setValue(property, "refAdminName", str2);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return property;}
    throw new Error("Missing return statement in function");
  }

  final public Trigger trigger() throws ParseException {String str;
    Token tmp;
    Trigger trigger = new Trigger();
    tmp = jj_consume_token(TRIGEVENT);
this.setValue(trigger, "eventType", this.getSingle(tmp.image));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRIGKIND_ACTION:{
      jj_consume_token(TRIGKIND_ACTION);
this.setValue(trigger, "kind", "action");
      break;
      }
    case TRIGKIND_CHECK:{
      jj_consume_token(TRIGKIND_CHECK);
this.setValue(trigger, "kind", "check");
      break;
      }
    case TRIGKIND_OVERRIDE:{
      jj_consume_token(TRIGKIND_OVERRIDE);
this.setValue(trigger, "kind", "override");
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    str = string();
this.setValue(trigger, "program", str);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INPUT:{
      jj_consume_token(INPUT);
      str = string();
this.setValue(trigger, "arguments",            str);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
{if ("" != null) return trigger;}
    throw new Error("Missing return statement in function");
  }

/************************************************************ Local Attribute */
/**
 * Parses the local attribute definition.
 */
  final public LocalAttribute localAttribute() throws ParseException, ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String name;
    LocalAttribute localAttr = new LocalAttribute();
    name = string();
    jj_consume_token(BRACE_OPEN);
    parseAttribute(localAttr);
    jj_consume_token(BRACE_CLOSE);
localAttr.setLocalName(name);
        {if ("" != null) return localAttr;}
    throw new Error("Missing return statement in function");
  }

/************************************************************ Local Path Type */
/**
 * Parses the local path type definition.
 */
  final public LocalPathType localPathType() throws ParseException, ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String name;
    AdminProperty property;
    LocalAttribute localAttr;
    LocalPathType localPathType = new LocalPathType();
    name = string();
    jj_consume_token(BRACE_OPEN);
    parsePathType(localPathType);
    jj_consume_token(BRACE_CLOSE);
localPathType.setLocalName(name);
        {if ("" != null) return localPathType;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parses the access definition.
 */
  final public Access access() throws ParseException {String str;
    Token tmp;
    Access access = new Access();
    @SuppressWarnings("rawtypes") Set accessSet = new HashSet();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REVOKE:{
      jj_consume_token(REVOKE);
this.setValue(access, "revoke", true);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LOGIN:{
      jj_consume_token(LOGIN);
this.setValue(access, "login", true);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OWNER:{
      jj_consume_token(OWNER);
this.setValue(access, "kind", "owner");
      break;
      }
    case PUBLIC:{
      jj_consume_token(PUBLIC);
this.setValue(access, "kind", "public");
      break;
      }
    case USER:{
      jj_consume_token(USER);
      str = string();
this.setValue(access, "kind", "user");this.setValue(access, "userRef", str);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ANCESTOR:
      case ANY:
      case CONTEXT:
      case CONTRACTOR:
      case CUSTOMER:
      case DESCENDANT:
      case GOLDPARTNER:
      case INCLUSIVE:
      case NO:
      case NOTPRIVATE:
      case OEM:
      case PARTNER:
      case PPP:
      case PRIVATE:
      case PROTECTED:
      case RELATED:
      case SINGLE:
      case SUPPLIER:
      case BRACE_OPEN:
      case KEY:
      case FILTER:
      case LOCALFILTER:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRACE_OPEN:{
        jj_consume_token(BRACE_OPEN);
token_source.SwitchTo(AC_ACCESS_STRING_EXPECTED);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AC_ACCESS_STRING:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_3;
          }
          tmp = jj_consume_token(AC_ACCESS_STRING);
accessSet.add(tmp.image);
        }
        jj_consume_token(AC_CLOSE);
this.appendValues(access, "access", accessSet);
        break;
        }
      case KEY:{
        jj_consume_token(KEY);
        str = string();
this.setValue(access, "key", str);
        break;
        }
      case FILTER:{
        jj_consume_token(FILTER);
        str = multiLineString();
this.setValue(access, "filter", str);
        break;
        }
      case LOCALFILTER:{
        jj_consume_token(LOCALFILTER);
        str = multiLineString();
this.setValue(access, "localfilter", str);
        break;
        }
      case ANCESTOR:{
        jj_consume_token(ANCESTOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ORGANIZATION:{
          tmp = jj_consume_token(ORGANIZATION);
          break;
          }
        case PROJECT:{
          tmp = jj_consume_token(PROJECT);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(access, tmp.image, "ancestor");
        break;
        }
      case ANY:{
        jj_consume_token(ANY);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CATEGORY:{
          tmp = jj_consume_token(CATEGORY);
          break;
          }
        case MATURITY:{
          tmp = jj_consume_token(MATURITY);
          break;
          }
        case ORGANIZATION:{
          tmp = jj_consume_token(ORGANIZATION);
          break;
          }
        case OWNER:{
          tmp = jj_consume_token(OWNER);
          break;
          }
        case PROJECT:{
          tmp = jj_consume_token(PROJECT);
          break;
          }
        case RESERVE:{
          tmp = jj_consume_token(RESERVE);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(access, tmp.image, "any");
        break;
        }
      case CONTEXT:{
        jj_consume_token(CONTEXT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OWNER:{
          tmp = jj_consume_token(OWNER);
          break;
          }
        case RESERVE:{
          tmp = jj_consume_token(RESERVE);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(access, tmp.image, "context");
        break;
        }
      case CONTRACTOR:{
        jj_consume_token(CONTRACTOR);
        tmp = jj_consume_token(CATEGORY);
this.setValue(access, tmp.image, "contractor");
        break;
        }
      case CUSTOMER:{
        jj_consume_token(CUSTOMER);
        tmp = jj_consume_token(CATEGORY);
this.setValue(access, tmp.image, "customer");
        break;
        }
      case DESCENDANT:{
        jj_consume_token(DESCENDANT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ORGANIZATION:{
          tmp = jj_consume_token(ORGANIZATION);
          break;
          }
        case PROJECT:{
          tmp = jj_consume_token(PROJECT);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(access, tmp.image, "descendant");
        break;
        }
      case GOLDPARTNER:{
        jj_consume_token(GOLDPARTNER);
        tmp = jj_consume_token(CATEGORY);
this.setValue(access, tmp.image, "goldpartner");
        break;
        }
      case INCLUSIVE:{
        jj_consume_token(INCLUSIVE);
        tmp = jj_consume_token(RESERVE);
this.setValue(access, tmp.image, "inclusive");
        break;
        }
      case NO:{
        jj_consume_token(NO);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MATURITY:{
          tmp = jj_consume_token(MATURITY);
          break;
          }
        case RESERVE:{
          tmp = jj_consume_token(RESERVE);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(access, tmp.image, "no");
        break;
        }
      case NOTPRIVATE:{
        jj_consume_token(NOTPRIVATE);
        tmp = jj_consume_token(MATURITY);
this.setValue(access, tmp.image, "notprivate");
        break;
        }
      case OEM:{
        jj_consume_token(OEM);
        tmp = jj_consume_token(CATEGORY);
this.setValue(access, tmp.image, "oem");
        break;
        }
      case PARTNER:{
        jj_consume_token(PARTNER);
        tmp = jj_consume_token(CATEGORY);
this.setValue(access, tmp.image, "partner");
        break;
        }
      case PPP:{
        jj_consume_token(PPP);
        tmp = jj_consume_token(MATURITY);
this.setValue(access, tmp.image, "ppp");
        break;
        }
      case PRIVATE:{
        jj_consume_token(PRIVATE);
        tmp = jj_consume_token(MATURITY);
this.setValue(access, tmp.image, "private");
        break;
        }
      case PROTECTED:{
        jj_consume_token(PROTECTED);
        tmp = jj_consume_token(MATURITY);
this.setValue(access, tmp.image, "protected");
        break;
        }
      case RELATED:{
        jj_consume_token(RELATED);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ORGANIZATION:{
          tmp = jj_consume_token(ORGANIZATION);
          break;
          }
        case PROJECT:{
          tmp = jj_consume_token(PROJECT);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(access, tmp.image, "related");
        break;
        }
      case SINGLE:{
        jj_consume_token(SINGLE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ORGANIZATION:{
          tmp = jj_consume_token(ORGANIZATION);
          break;
          }
        case PROJECT:{
          tmp = jj_consume_token(PROJECT);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(access, tmp.image, "single");
        break;
        }
      case SUPPLIER:{
        jj_consume_token(SUPPLIER);
        tmp = jj_consume_token(CATEGORY);
this.setValue(access, tmp.image, "supplier");
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_1(2147483647) && (getToken(2).kind == MATURITY)) {
        jj_consume_token(PUBLIC);
        tmp = jj_consume_token(MATURITY);
this.setValue(access, tmp.image, "public");
      } else {
        ;
      }
    }
{if ("" != null) return access;}
    throw new Error("Missing return statement in function");
  }

/**************************************************** Data Model -> Attribute */

/**
 * Parses one complete attribute definition.
 *
 * @param _attribute    target attribute to update with parsed values
 */
  final public void parseAttribute(final AttributeCI_mxJPO _attr) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Integer number;
    Token tmp;
    Trigger trigger;
    AttributeCI_mxJPO.Range range;
    AdminProperty property;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case MULTILINE_TRUE:
      case MULTILINE_FALSE:
      case MULTIVALUE_TRUE:
      case MULTIVALUE_FALSE:
      case RANGEVALUE_TRUE:
      case RANGEVALUE_FALSE:
      case RESETONCLONE_TRUE:
      case RESETONCLONE_FALSE:
      case RESETONREVISION_TRUE:
      case RESETONREVISION_FALSE:
      case MAXLENGTH:
      case DIMENSION:
      case PACKAGE:
      case RULE:
      case SYMBOLICNAME:
      case UUID:
      case DEFAULTVALUE:
      case DESCRIPTION:
      case PROPERTY:
      case KIND:
      case TRIGGER:
      case RANGE_EQUAL:
      case RANGE_GREATERTHAN:
      case RANGE_GREATERTHANEQUAL:
      case RANGE_LESSTHAN:
      case RANGE_LESSTHANEQUAL:
      case RANGE_NOTEQUAL:
      case RANGE_MATCH:
      case RANGE_NOTMATCH:
      case RANGE_SMATCH:
      case RANGE_NOTSMATCH:
      case RANGE_PROGRAM:
      case RANGE_BETWEEN:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_attr, "packageRef",             str);
        break;
        }
      case KIND:{
        jj_consume_token(KIND);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KIND_BINARY:{
          jj_consume_token(KIND_BINARY);
this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.Binary);
          break;
          }
        case KIND_BOOLEAN:{
          jj_consume_token(KIND_BOOLEAN);
this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.Boolean);
          break;
          }
        case KIND_DATE:{
          jj_consume_token(KIND_DATE);
this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.Date);
          break;
          }
        case KIND_INTEGER:{
          jj_consume_token(KIND_INTEGER);
this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.Integer);
          break;
          }
        case KIND_REAL:{
          jj_consume_token(KIND_REAL);
this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.Real);
          break;
          }
        case KIND_STRING:{
          jj_consume_token(KIND_STRING);
this.setValue(_attr, "kind", AttributeCI_mxJPO.Kind.String);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_attr, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_attr, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_attr, "description", str);
        break;
        }
      case DEFAULTVALUE:{
        jj_consume_token(DEFAULTVALUE);
        str = multiLineString();
this.setValue(_attr, "defaultValue", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_attr, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_attr, "hidden", false);
        break;
        }
      case MULTIVALUE_TRUE:{
        jj_consume_token(MULTIVALUE_TRUE);
this.setValue(_attr, "multiValue", true);
        break;
        }
      case MULTIVALUE_FALSE:{
        jj_consume_token(MULTIVALUE_FALSE);
this.setValue(_attr, "multiValue", false);
        break;
        }
      case RESETONCLONE_TRUE:{
        jj_consume_token(RESETONCLONE_TRUE);
this.setValue(_attr, "resetOnClone", true);
        break;
        }
      case RESETONCLONE_FALSE:{
        jj_consume_token(RESETONCLONE_FALSE);
this.setValue(_attr, "resetOnClone", false);
        break;
        }
      case RESETONREVISION_TRUE:{
        jj_consume_token(RESETONREVISION_TRUE);
this.setValue(_attr, "resetOnRevision", true);
        break;
        }
      case RESETONREVISION_FALSE:{
        jj_consume_token(RESETONREVISION_FALSE);
this.setValue(_attr, "resetOnRevision", false);
        break;
        }
      case RANGEVALUE_TRUE:{
        jj_consume_token(RANGEVALUE_TRUE);
this.setValue(_attr, "rangeValue", true);
        break;
        }
      case RANGEVALUE_FALSE:{
        jj_consume_token(RANGEVALUE_FALSE);
this.setValue(_attr, "rangeValue", false);
        break;
        }
      case MULTILINE_TRUE:{
        jj_consume_token(MULTILINE_TRUE);
this.setValue(_attr, "multiline", true);
        break;
        }
      case MULTILINE_FALSE:{
        jj_consume_token(MULTILINE_FALSE);
this.setValue(_attr, "multiline", false);
        break;
        }
      case MAXLENGTH:{
        jj_consume_token(MAXLENGTH);
        number = naturalNumber();
this.setValue(_attr, "maxLength", number);
        break;
        }
      case RULE:{
        jj_consume_token(RULE);
        str = string();
this.appendValue(_attr, "rules", str);
        break;
        }
      case DIMENSION:{
        jj_consume_token(DIMENSION);
        str = string();
this.setValue(_attr, "dimension", str);
        break;
        }
      case TRIGGER:{
        jj_consume_token(TRIGGER);
        trigger = trigger();
this.appendValue(_attr, "triggers", "triggersStack", trigger);
        break;
        }
      case RANGE_EQUAL:{
        jj_consume_token(RANGE_EQUAL);
        str = string();
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "=");      this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);
        break;
        }
      case RANGE_GREATERTHAN:{
        jj_consume_token(RANGE_GREATERTHAN);
        str = string();
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", ">");      this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);
        break;
        }
      case RANGE_GREATERTHANEQUAL:{
        jj_consume_token(RANGE_GREATERTHANEQUAL);
        str = string();
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", ">=");     this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);
        break;
        }
      case RANGE_LESSTHAN:{
        jj_consume_token(RANGE_LESSTHAN);
        str = string();
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "<");      this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);
        break;
        }
      case RANGE_LESSTHANEQUAL:{
        jj_consume_token(RANGE_LESSTHANEQUAL);
        str = string();
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "<=");     this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);
        break;
        }
      case RANGE_NOTEQUAL:{
        jj_consume_token(RANGE_NOTEQUAL);
        str = string();
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "!=");     this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);
        break;
        }
      case RANGE_MATCH:{
        jj_consume_token(RANGE_MATCH);
        str = string();
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "match");  this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);
        break;
        }
      case RANGE_NOTMATCH:{
        jj_consume_token(RANGE_NOTMATCH);
        str = string();
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "!match"); this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);
        break;
        }
      case RANGE_SMATCH:{
        jj_consume_token(RANGE_SMATCH);
        str = string();
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "smatch"); this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);
        break;
        }
      case RANGE_NOTSMATCH:{
        jj_consume_token(RANGE_NOTSMATCH);
        str = string();
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "!smatch");this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);
        break;
        }
      case RANGE_PROGRAM:{
        jj_consume_token(RANGE_PROGRAM);
        str = string();
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "program");this.setValue(range, "value1", str);this.appendValue(_attr, "rangesStack", range);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INPUT:{
          jj_consume_token(INPUT);
          str = string();
this.setValue(range, "value2", str);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        break;
        }
      case RANGE_BETWEEN:{
        jj_consume_token(RANGE_BETWEEN);
range = new AttributeCI_mxJPO.Range();this.setValue(range, "type", "between");this.appendValue(_attr, "rangesStack", range);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BETW1_STRING:{
          tmp = jj_consume_token(BETW1_STRING);
this.setValue(range, "value1", this.getString(tmp.image));
          break;
          }
        case BETW1_SINGLE:{
          tmp = jj_consume_token(BETW1_SINGLE);
this.setValue(range, "value1", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BETW2_INCLUSIVE:{
          jj_consume_token(BETW2_INCLUSIVE);
this.setValue(range, "include1", true);
          break;
          }
        case BETW2_EXCLUSIVE:{
          jj_consume_token(BETW2_EXCLUSIVE);
this.setValue(range, "include1", false);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BETW3_STRING:{
          tmp = jj_consume_token(BETW3_STRING);
this.setValue(range, "value2", this.getString(tmp.image));
          break;
          }
        case BETW3_SINGLE:{
          tmp = jj_consume_token(BETW3_SINGLE);
this.setValue(range, "value2", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BETW4_INCLUSIVE:{
          jj_consume_token(BETW4_INCLUSIVE);
this.setValue(range, "include2", true);
          break;
          }
        case BETW4_EXCLUSIVE:{
          jj_consume_token(BETW4_EXCLUSIVE);
this.setValue(range, "include2", false);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_attr, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**************************************************** Data Model -> Dimension */

/**
 * Parses one complete dimension definition.
 *
 * @param _dimension    target dimension to update with parsed values
 */
  final public void parseDimension(final Dimension_mxJPO _dimension) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    Set<String> set;
    AdminProperty property;
    Dimension_mxJPO.Unit unit;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:
      case UNIT:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_dimension, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_dimension, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_dimension, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_dimension, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_dimension, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_dimension, "hidden", false);
        break;
        }
      case UNIT:{
        jj_consume_token(UNIT);
unit = new Dimension_mxJPO.Unit();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNITNAME_STRING:{
          tmp = jj_consume_token(UNITNAME_STRING);
this.setValue(unit, "name", this.getString(tmp.image));
          break;
          }
        case UNITNAME_SINGLE:{
          tmp = jj_consume_token(UNITNAME_SINGLE);
this.setValue(unit, "name", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(UNITDEF_START);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case UNITDEF_UUID:
          case UNITDEF_DEFAULT_TRUE:
          case UNITDEF_DEFAULT_FALSE:
          case UNITDEF_DESCRIPTION:
          case UNITDEF_LABEL:
          case UNITDEF_MULTIPLIER:
          case UNITDEF_OFFSET:
          case UNITDEF_SETTING:
          case UNITDEF_PROPERTY:
          case UNITDEF_SYSTEM:{
            ;
            break;
            }
          default:
            jj_la1[30] = jj_gen;
            break label_6;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case UNITDEF_UUID:{
            jj_consume_token(UNITDEF_UUID);
            str = unitDefString();
property = new AdminProperty();this.appendValue(this.getValue(unit, "properties"), "propertiesStack", property);this.setValue(property, "name",  "UUID");this.setValue(property, "value", str);
            break;
            }
          case UNITDEF_DEFAULT_TRUE:{
            jj_consume_token(UNITDEF_DEFAULT_TRUE);
this.setValue(unit, "defaultUnit", true);
            break;
            }
          case UNITDEF_DEFAULT_FALSE:{
            jj_consume_token(UNITDEF_DEFAULT_FALSE);
this.setValue(unit, "defaultUnit", false);
            break;
            }
          case UNITDEF_DESCRIPTION:{
            jj_consume_token(UNITDEF_DESCRIPTION);
            str = unitDefString();
this.setValue(unit, "description", str);
            break;
            }
          case UNITDEF_LABEL:{
            jj_consume_token(UNITDEF_LABEL);
            str = unitDefString();
this.setValue(unit, "label", str);
            break;
            }
          case UNITDEF_MULTIPLIER:{
            jj_consume_token(UNITDEF_MULTIPLIER);
            tmp = jj_consume_token(UNITDEF_DOUBLE_DOUBLE);
this.setValue(unit, "multiplier", Double.parseDouble(tmp.image));
            break;
            }
          case UNITDEF_OFFSET:{
            jj_consume_token(UNITDEF_OFFSET);
            tmp = jj_consume_token(UNITDEF_DOUBLE_DOUBLE);
this.setValue(unit, "offset", Double.parseDouble(tmp.image));
            break;
            }
          case UNITDEF_SETTING:{
            jj_consume_token(UNITDEF_SETTING);
            property = unitDefSetting();
this.appendValue(unit, "properties", "propertiesStack", property);
            break;
            }
          case UNITDEF_PROPERTY:{
            jj_consume_token(UNITDEF_PROPERTY);
            property = unitDefProperty();
this.appendValue(unit, "properties", "propertiesStack", property);
            break;
            }
          case UNITDEF_SYSTEM:{
            jj_consume_token(UNITDEF_SYSTEM);
            property = unitDefSystem();
this.appendValue(unit, "properties", "propertiesStack", property);
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(UNITDEF_END);
this.appendValue(_dimension, "units", unit);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_dimension, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * Evaluates a simple string.
 *
 * @return evaluated simple string
 */
  final public String unitDefString() throws ParseException {Token tmp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNITDEF_STRING:{
      tmp = jj_consume_token(UNITDEF_STRING);
{if ("" != null) return this.getString(tmp.image);}
      break;
      }
    case UNITDEF_SINGLE:{
      tmp = jj_consume_token(UNITDEF_SINGLE);
{if ("" != null) return this.getSingle(tmp.image);}
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parses one setting for a unit definition. The setting is returned as
 * property where the name of the property is the key of the setting with '%'
 * as prefix.
 *
 * @return parsed property setting
 */
  final public AdminProperty unitDefSetting() throws ParseException {Token tmp;
    final String key, value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNITDEF_STRINGSTRING_STRING:{
      tmp = jj_consume_token(UNITDEF_STRINGSTRING_STRING);
key = this.getString(tmp.image);
      break;
      }
    case UNITDEF_STRINGSTRING_SINGLE:{
      tmp = jj_consume_token(UNITDEF_STRINGSTRING_SINGLE);
key = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    value = unitDefString();
final AdminProperty ret = new AdminProperty();
        this.setValue(ret, "name", "%" + key);
        this.setValue(ret, "value", value);
        {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parses the system information for a unit definition. The system is returned
 * as property where the referenced admin type is set to unit and the referenced
 * admin name is the system unit.
 *
 * @return parsed property system
 */
  final public AdminProperty unitDefSystem() throws ParseException {Token tmp;
    String name;
    String unit;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNITDEF_SYSTEMNAME_STRING:{
      tmp = jj_consume_token(UNITDEF_SYSTEMNAME_STRING);
name = this.getString(tmp.image);
      break;
      }
    case UNITDEF_SYSTEMNAME_SINGLE:{
      tmp = jj_consume_token(UNITDEF_SYSTEMNAME_SINGLE);
name = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(UNITDEF_SYSTEMDEF_TO);
    jj_consume_token(UNITDEF_SYSTEMDEF_UNIT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNITDEF_SYSTEMUNIT_STRING:{
      tmp = jj_consume_token(UNITDEF_SYSTEMUNIT_STRING);
unit = this.getString(tmp.image);
      break;
      }
    case UNITDEF_SYSTEMUNIT_SINGLE:{
      tmp = jj_consume_token(UNITDEF_SYSTEMUNIT_SINGLE);
unit = this.getSingle(tmp.image);
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
final AdminProperty ret = new AdminProperty();
        this.setValue(ret, "name", name);
        this.setValue(ret, "refAdminType", "unit");
        this.setValue(ret, "refAdminName", unit);
        {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parses one property for a unit definition.
 *
 * @return parsed property
 */
  final public AdminProperty unitDefProperty() throws ParseException {Token tmp;
    String name = null;
    String value = null;
    String toType = null;
    String toName = null;
    name = unitDefString();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNITDEF_PROPERTYVAL:
      case UNITDEF_PROPERTYTO:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNITDEF_PROPERTYVAL:{
        jj_consume_token(UNITDEF_PROPERTYVAL);
        value = unitDefString();
        break;
        }
      case UNITDEF_PROPERTYTO:{
        jj_consume_token(UNITDEF_PROPERTYTO);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNITDEF_STRINGSTRING_STRING:{
          tmp = jj_consume_token(UNITDEF_STRINGSTRING_STRING);
toType = this.getString(tmp.image);
          break;
          }
        case UNITDEF_STRINGSTRING_SINGLE:{
          tmp = jj_consume_token(UNITDEF_STRINGSTRING_SINGLE);
toType = this.getSingle(tmp.image);
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        toName = unitDefString();
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
final AdminProperty ret = new AdminProperty();
        this.setValue(ret, "name", name);
        this.setValue(ret, "value", value);
        this.setValue(ret, "refAdminType", toType);
        this.setValue(ret, "refAdminName", toName);
        {if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
  }

/*************************************************** Data Model -> Expression */

/**
 * Parses one complete expression definition.
 *
 * @param _expression   target expression to update with parsed values
 */
  final public void parseExpression(final Expression_mxJPO _expression) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    AdminProperty property = null;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:
      case PROPERTYVAL:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_expression, "packageRef", str);property = null;
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_expression, "properties", "propertiesStack", property);property = null;
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_expression, "symbolicNames", str);property = null;
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_expression, "description", str);property = null;
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_expression, "hidden", true);property = null;
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_expression, "hidden", false);property = null;
        break;
        }
      case PROPERTYVAL:{
        jj_consume_token(PROPERTYVAL);
// work-around:
                                                                                    // normally only single-line-string is allowed
                                                                                    // but for expression value, multi-line-string is allowed (property == null)
                                                                                    if (property == null)  {
                                                                                        token_source.SwitchTo(MULTILINESTRING_EXPECTED);
                                                                                    }
        str = multiLineString();
// hint: token value is used twice
                                                                                    // (for property and as expression value)
                                                                                    // => staffed via property variable
                                                                                    if (property == null)  {
                                                                                        this.setValue(_expression, "value", str);
                                                                                    } else  {
                                                                                        this.setValue(property, "value", str);
                                                                                        property = null;
                                                                                    }
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
property = new AdminProperty();this.appendValue(_expression, "properties", "propertiesStack", property);
        str = string();
this.setValue(property, "name", str);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TO:{
          jj_consume_token(TO);
token_source.SwitchTo(STRING_STRING_EXPECTED);
          str = stringString();
this.setValue(property, "refAdminType", str);
          str = string();
this.setValue(property, "refAdminName", str);
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/******************************************************* Data Model -> Format */

/**
 * Parses one complete format definition.
 *
 * @param _format   target format to update with parsed values
 */
  final public void parseFormat(final Format_mxJPO _format) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case VERSION:
      case EDIT:
      case MIME:
      case PACKAGE:
      case PRINT:
      case SUFFIX:
      case SYMBOLICNAME:
      case UUID:
      case VIEW:
      case DESCRIPTION:
      case PROPERTY:
      case TYPE:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_format, "packageRef",   str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_format, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_format, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_format, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_format, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_format, "hidden", false);
        break;
        }
      case MIME:{
        jj_consume_token(MIME);
        str = string();
this.setValue(_format, "mimeType", str);
        break;
        }
      case SUFFIX:{
        jj_consume_token(SUFFIX);
        str = string();
this.setValue(_format, "fileSuffix", str);
        break;
        }
      case TYPE:{
        jj_consume_token(TYPE);
        str = string();
this.setValue(_format, "type", str);
        break;
        }
      case VERSION:{
        jj_consume_token(VERSION);
        str = string();
this.setValue(_format, "version", str);
        break;
        }
      case VIEW:{
        jj_consume_token(VIEW);
        str = string();
this.setValue(_format, "commandView",  str);
        break;
        }
      case EDIT:{
        jj_consume_token(EDIT);
        str = string();
this.setValue(_format, "commandEdit",  str);
        break;
        }
      case PRINT:{
        jj_consume_token(PRINT);
        str = string();
this.setValue(_format, "commandPrint", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_format, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**************************************************** Data Model -> Interface */

/**
 * Parses one complete interface definition.
 *
 * @param _interface    target interface to update with parsed values
 */
  final public void parseInterface(final Interface_mxJPO _interface) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    LocalAttribute localAttr;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT_TRUE:
      case ABSTRACT_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case LOCAL:
      case ATTRIBUTE:
      case DERIVED:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:
      case FOR:{
        ;
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_interface, "packageRef",   str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_interface, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_interface, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_interface, "description", str);
        break;
        }
      case ABSTRACT_TRUE:{
        jj_consume_token(ABSTRACT_TRUE);
this.setValue(_interface, "abstractFlag", true);
        break;
        }
      case ABSTRACT_FALSE:{
        jj_consume_token(ABSTRACT_FALSE);
this.setValue(_interface, "abstractFlag", false);
        break;
        }
      case DERIVED:{
        jj_consume_token(DERIVED);
        str = string();
this.appendValue(_interface, "derived", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_interface, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_interface, "hidden", false);
        break;
        }
      case ATTRIBUTE:{
        jj_consume_token(ATTRIBUTE);
        str = string();
this.appendValue(_interface, "globalAttributes",            str);
        break;
        }
      case FOR:{
        jj_consume_token(FOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FOR_PATHTYPE_ALL:{
          jj_consume_token(FOR_PATHTYPE_ALL);
this.setValue(_interface, "pathTypeAll", true);
          break;
          }
        case FOR_PATHTYPE:{
          jj_consume_token(FOR_PATHTYPE);
          str = string();
this.appendValue(_interface, "pathTypes", str);
          break;
          }
        case FOR_RELATIONSHIP_ALL:{
          jj_consume_token(FOR_RELATIONSHIP_ALL);
this.setValue(_interface, "relationAll", true);
          break;
          }
        case FOR_RELATIONSHIP:{
          jj_consume_token(FOR_RELATIONSHIP);
          str = string();
this.appendValue(_interface, "relations", str);
          break;
          }
        case FOR_TYPE_ALL:{
          jj_consume_token(FOR_TYPE_ALL);
this.setValue(_interface, "typeAll", true);
          break;
          }
        case FOR_TYPE:{
          jj_consume_token(FOR_TYPE);
          str = string();
this.appendValue(_interface, "types", str);
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case LOCAL:{
        jj_consume_token(LOCAL);
        jj_consume_token(ATTRIBUTE);
        localAttr = localAttribute();
this.appendValue(_interface, "localAttributes", localAttr);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_interface, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**************************************************** Data Model -> Path Type */

/**
 * Parses one complete path type definition.
 *
 * @param _pathType     target path type to update with parsed values
 */
  final public void parsePathType(final PathType_mxJPO _pathType) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    LocalAttribute localAttr;
    Trigger trigger;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case LOCAL:
      case FROM_WITH_BRACE:
      case TO_WITH_BRACE:
      case ATTRIBUTE:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_pathType, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_pathType, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_pathType, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_pathType, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_pathType, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_pathType, "hidden", false);
        break;
        }
      case FROM_WITH_BRACE:{
        jj_consume_token(FROM_WITH_BRACE);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CARDINALITY:
          case RELATIONSHIP:
          case TYPE:{
            ;
            break;
            }
          default:
            jj_la1[49] = jj_gen;
            break label_12;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CARDINALITY:{
            jj_consume_token(CARDINALITY);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ONE:{
              jj_consume_token(ONE);
this.setValue(_pathType, "fromCardinality", PathType_mxJPO.Cardinality.One);
              break;
              }
            case MANY:{
              jj_consume_token(MANY);
this.setValue(_pathType, "fromCardinality", PathType_mxJPO.Cardinality.Many);
              break;
              }
            default:
              jj_la1[50] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case TYPE:{
            jj_consume_token(TYPE);
            str = string();
if ("all".equals(str)) {this.setValue(_pathType, "fromTypeAll",     true);} else {this.appendValue(_pathType, "fromTypes",     str);}
            break;
            }
          case RELATIONSHIP:{
            jj_consume_token(RELATIONSHIP);
            str = string();
if ("all".equals(str)) {this.setValue(_pathType, "fromRelationAll", true);} else {this.appendValue(_pathType, "fromRelations", str);}
            break;
            }
          default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(BRACE_CLOSE);
        break;
        }
      case TO_WITH_BRACE:{
        jj_consume_token(TO_WITH_BRACE);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RELATIONSHIP:
          case TYPE:{
            ;
            break;
            }
          default:
            jj_la1[52] = jj_gen;
            break label_13;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TYPE:{
            jj_consume_token(TYPE);
            str = string();
if ("all".equals(str)) {this.setValue(_pathType, "toTypeAll",     true);} else {this.appendValue(_pathType, "toTypes",     str);}
            break;
            }
          case RELATIONSHIP:{
            jj_consume_token(RELATIONSHIP);
            str = string();
if ("all".equals(str)) {this.setValue(_pathType, "toRelationAll", true);} else {this.appendValue(_pathType, "toRelations", str);}
            break;
            }
          default:
            jj_la1[53] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(BRACE_CLOSE);
        break;
        }
      case ATTRIBUTE:{
        jj_consume_token(ATTRIBUTE);
        str = string();
this.appendValue(_pathType, "globalAttributes", str);
        break;
        }
      case LOCAL:{
        jj_consume_token(LOCAL);
        jj_consume_token(ATTRIBUTE);
        localAttr = localAttribute();
this.appendValue(_pathType, "localAttributes", localAttr);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_pathType, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/******************************************************* Data Model -> Policy */

/**
 * Parses one complete policy definition.
 *
 * @param _policy   target policy to update with parsed values
 */
  final public void parsePolicy(final Policy_mxJPO _policy) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    AdminProperty property;
    Policy_mxJPO.State state;
    Access access;
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENFORCE_TRUE:
      case ENFORCE_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case ALLSTATE:
      case FORMAT_ALL:
      case DEFAULTFORMAT:
      case FORMAT:
      case MAJORSEQUENCE:
      case MINORSEQUENCE:
      case PACKAGE:
      case SEQUENCE:
      case STATE:
      case STORE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:
      case DELIMITER:
      case TYPE:{
        ;
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_policy, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_policy, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_policy, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_policy, "description", str);
        break;
        }
      case FORMAT_ALL:{
        jj_consume_token(FORMAT_ALL);
this.setValue(_policy, "allFormats", true);
        break;
        }
      case FORMAT:{
        jj_consume_token(FORMAT);
        str = string();
this.appendValue(_policy, "formats", str);
        break;
        }
      case TYPE:{
        jj_consume_token(TYPE);
        str = string();
if ("all".equals(str)) {this.setValue(_policy, "allTypes", true);} else {this.appendValue(_policy, "types", str);}
        break;
        }
      case DEFAULTFORMAT:{
        jj_consume_token(DEFAULTFORMAT);
        str = string();
this.setValue(_policy, "defaultFormat", str);
        break;
        }
      case ENFORCE_TRUE:{
        jj_consume_token(ENFORCE_TRUE);
this.setValue(_policy, "enforce", true);
        break;
        }
      case ENFORCE_FALSE:{
        jj_consume_token(ENFORCE_FALSE);
this.setValue(_policy, "enforce", false);
        break;
        }
      case DELIMITER:{
        jj_consume_token(DELIMITER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELIMITERSTRING:{
          tmp = jj_consume_token(DELIMITERSTRING);
this.setValue(_policy, "delimiter", this.getString(tmp.image));
          break;
          }
        case DELIMITERSINGLE:{
          tmp = jj_consume_token(DELIMITERSINGLE);
this.setValue(_policy, "delimiter", this.getSingle(tmp.image));
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case MINORSEQUENCE:
      case SEQUENCE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEQUENCE:{
          jj_consume_token(SEQUENCE);
          break;
          }
        case MINORSEQUENCE:{
          jj_consume_token(MINORSEQUENCE);
          break;
          }
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        str = string();
this.setValue(_policy, "minorsequence", str);
        break;
        }
      case MAJORSEQUENCE:{
        jj_consume_token(MAJORSEQUENCE);
        str = string();
this.setValue(_policy, "majorsequence", str);
        break;
        }
      case STORE:{
        jj_consume_token(STORE);
        str = string();
this.setValue(_policy, "store", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_policy, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_policy, "hidden", false);
        break;
        }
      case ALLSTATE:{
        jj_consume_token(ALLSTATE);
this.setValue(_policy, "allState", true);
        jj_consume_token(BRACE_OPEN);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LOGIN:
          case OWNER:
          case PUBLIC:
          case REVOKE:
          case USER:{
            ;
            break;
            }
          default:
            jj_la1[58] = jj_gen;
            break label_15;
          }
          access = access();
this.appendValue(_policy, "allStateAccess", "accessList", access);
        }
        jj_consume_token(BRACE_CLOSE);
        break;
        }
      case STATE:{
        jj_consume_token(STATE);
        state = state();
this.appendValue(_policy, "states", state);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_policy, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * Parses one state definition.
 *
 * @return state
 */
  final public Policy_mxJPO.State state() throws ParseException {String str1, str2;
    final Policy_mxJPO.State state = new Policy_mxJPO.State();
    Set<String> tmpSet;
    Token tmp;
    Trigger trigger;
    Policy_mxJPO.Signature signature;
    AdminProperty property;
    Access access;
    str1 = string();
this.setValue(state, "name", str1);
    jj_consume_token(BRACE_OPEN);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHECKOUTHISTORY_TRUE:
      case CHECKOUTHISTORY_FALSE:
      case ENFORCERESERVEACCESS_TRUE:
      case ENFORCERESERVEACCESS_FALSE:
      case MAJORREVISION_TRUE:
      case MAJORREVISION_FALSE:
      case MINORREVISION_TRUE:
      case MINORREVISION_FALSE:
      case PROMOTE_TRUE:
      case PROMOTE_FALSE:
      case PUBLISHED_TRUE:
      case PUBLISHED_FALSE:
      case REVISION:
      case REVISION_FALSE:
      case VERSION:
      case VERSION_FALSE:
      case LOGIN:
      case OWNER:
      case PUBLIC:
      case REVOKE:
      case USER:
      case ROUTE:
      case ACTION:
      case CHECK:
      case REGISTEREDNAME:
      case SIGNATURE:
      case PROPERTY:
      case TRIGGER:{
        ;
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REGISTEREDNAME:{
        jj_consume_token(REGISTEREDNAME);
        str1 = string();
this.appendValue(state, "symbolicNames", str1);
        break;
        }
      case MINORREVISION_TRUE:
      case REVISION:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINORREVISION_TRUE:{
          jj_consume_token(MINORREVISION_TRUE);
          break;
          }
        case REVISION:{
          jj_consume_token(REVISION);
          break;
          }
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "minorrevisionable", true);
        break;
        }
      case MINORREVISION_FALSE:
      case REVISION_FALSE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINORREVISION_FALSE:{
          jj_consume_token(MINORREVISION_FALSE);
          break;
          }
        case REVISION_FALSE:{
          jj_consume_token(REVISION_FALSE);
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(state, "minorrevisionable", false);
        break;
        }
      case MAJORREVISION_TRUE:{
        jj_consume_token(MAJORREVISION_TRUE);
this.setValue(state, "majorrevisionable", true);
        break;
        }
      case MAJORREVISION_FALSE:{
        jj_consume_token(MAJORREVISION_FALSE);
this.setValue(state, "majorrevisionable", false);
        break;
        }
      case VERSION:{
        jj_consume_token(VERSION);
this.setValue(state, "versionable", true);
        break;
        }
      case VERSION_FALSE:{
        jj_consume_token(VERSION_FALSE);
this.setValue(state, "versionable", false);
        break;
        }
      case PROMOTE_TRUE:{
        jj_consume_token(PROMOTE_TRUE);
this.setValue(state, "autoPromotion", true);
        break;
        }
      case PROMOTE_FALSE:{
        jj_consume_token(PROMOTE_FALSE);
this.setValue(state, "autoPromotion", false);
        break;
        }
      case CHECKOUTHISTORY_TRUE:{
        jj_consume_token(CHECKOUTHISTORY_TRUE);
this.setValue(state, "checkoutHistory", true);
        break;
        }
      case CHECKOUTHISTORY_FALSE:{
        jj_consume_token(CHECKOUTHISTORY_FALSE);
this.setValue(state, "checkoutHistory", false);
        break;
        }
      case ENFORCERESERVEACCESS_TRUE:{
        jj_consume_token(ENFORCERESERVEACCESS_TRUE);
this.setValue(state, "enforcereserveaccess", true);
        break;
        }
      case ENFORCERESERVEACCESS_FALSE:{
        jj_consume_token(ENFORCERESERVEACCESS_FALSE);
this.setValue(state, "enforcereserveaccess", false);
        break;
        }
      case PUBLISHED_TRUE:{
        jj_consume_token(PUBLISHED_TRUE);
this.setValue(state, "published", true);
        break;
        }
      case PUBLISHED_FALSE:{
        jj_consume_token(PUBLISHED_FALSE);
this.setValue(state, "published", false);
        break;
        }
      case LOGIN:
      case OWNER:
      case PUBLIC:
      case REVOKE:
      case USER:{
        access = access();
this.appendValue(state, "access", "accessList", access);
        break;
        }
      case ACTION:{
        jj_consume_token(ACTION);
        str1 = string();
this.setValue(state, "actionProgram", str1);
        jj_consume_token(INPUT);
        str1 = string();
this.setValue(state, "actionInput", str1);
        break;
        }
      case CHECK:{
        jj_consume_token(CHECK);
        str1 = string();
this.setValue(state, "checkProgram", str1);
        jj_consume_token(INPUT);
        str1 = string();
this.setValue(state, "checkInput", str1);
        break;
        }
      case ROUTE:{
        jj_consume_token(ROUTE);
        str1 = stringString();
        str2 = string();
this.setValue(state, "routeUser", str1); this.setValue(state, "routeMessage", str2);
        break;
        }
      case TRIGGER:{
        jj_consume_token(TRIGGER);
        trigger = trigger();
this.appendValue(state, "triggers", "triggersStack", trigger);
        break;
        }
      case SIGNATURE:{
        jj_consume_token(SIGNATURE);
signature = new Policy_mxJPO.Signature();this.appendValue(state, "signatures", signature);
        str1 = string();
this.setValue(signature, "name", str1);
        jj_consume_token(BRACE_OPEN);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case APPROVE_LIST:
          case IGNORE_LIST:
          case REJECT_LIST:
          case BRANCH:
          case FILTER:{
            ;
            break;
            }
          default:
            jj_la1[63] = jj_gen;
            break label_17;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BRANCH:{
            jj_consume_token(BRANCH);
            str1 = string();
this.setValue(signature, "branch", str1);
            break;
            }
          case APPROVE_LIST:{
            jj_consume_token(APPROVE_LIST);
            label_18:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:
              case LISTSINGLE:{
                ;
                break;
                }
              default:
                jj_la1[64] = jj_gen;
                break label_18;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:{
                tmp = jj_consume_token(LISTSTRING);
this.appendValue(signature, "approverUsers",                   this.getString(tmp.image));
                break;
                }
              case LISTSINGLE:{
                tmp = jj_consume_token(LISTSINGLE);
this.appendValue(signature, "approverUsers",                   this.getSingle(tmp.image));
                break;
                }
              default:
                jj_la1[65] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(LISTCLOSE);
            break;
            }
          case IGNORE_LIST:{
            jj_consume_token(IGNORE_LIST);
            label_19:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:
              case LISTSINGLE:{
                ;
                break;
                }
              default:
                jj_la1[66] = jj_gen;
                break label_19;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:{
                tmp = jj_consume_token(LISTSTRING);
this.appendValue(signature, "ignoreUsers",                     this.getString(tmp.image));
                break;
                }
              case LISTSINGLE:{
                tmp = jj_consume_token(LISTSINGLE);
this.appendValue(signature, "ignoreUsers",                     this.getSingle(tmp.image));
                break;
                }
              default:
                jj_la1[67] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(LISTCLOSE);
            break;
            }
          case REJECT_LIST:{
            jj_consume_token(REJECT_LIST);
            label_20:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:
              case LISTSINGLE:{
                ;
                break;
                }
              default:
                jj_la1[68] = jj_gen;
                break label_20;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LISTSTRING:{
                tmp = jj_consume_token(LISTSTRING);
this.appendValue(signature, "rejectUsers",                     this.getString(tmp.image));
                break;
                }
              case LISTSINGLE:{
                tmp = jj_consume_token(LISTSINGLE);
this.appendValue(signature, "rejectUsers",                     this.getSingle(tmp.image));
                break;
                }
              default:
                jj_la1[69] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(LISTCLOSE);
            break;
            }
          case FILTER:{
            jj_consume_token(FILTER);
            str1 = multiLineString();
this.setValue(signature, "filter", str1);
            break;
            }
          default:
            jj_la1[70] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(BRACE_CLOSE);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(state, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(BRACE_CLOSE);
{if ("" != null) return state;}
    throw new Error("Missing return statement in function");
  }

/************************************************* Data Model -> Relationship */

/**
 * Parses one complete relationship definition.
 *
 * @param _relationship target relationship to update with parsed values
 */
  final public void parseRelationship(final Relationship_mxJPO _relationship) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {AdminProperty property;
    Trigger trigger;
    String fromTo, str;
    LocalAttribute localAttr;
    LocalPathType localPathType;
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT_TRUE:
      case ABSTRACT_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case PREVENTDUPLICATES_TRUE:
      case PREVENTDUPLICATES_FALSE:
      case LOCAL:
      case FROM_WITH_BRACE:
      case TO_WITH_BRACE:
      case ATTRIBUTE:
      case DERIVED:
      case PACKAGE:
      case RULE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:
      case KIND:
      case TRIGGER:{
        ;
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_relationship, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(this.getValue(_relationship, "properties"), "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_relationship, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_relationship, "description", str);
        break;
        }
      case KIND:{
        jj_consume_token(KIND);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KIND_BASIC:{
          jj_consume_token(KIND_BASIC);
this.setValue(_relationship, "kind", Relationship_mxJPO.Kind.Basic);
          break;
          }
        case KIND_COMPOSITIONAL:{
          jj_consume_token(KIND_COMPOSITIONAL);
this.setValue(_relationship, "kind", Relationship_mxJPO.Kind.Compositional);
          break;
          }
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ABSTRACT_TRUE:{
        jj_consume_token(ABSTRACT_TRUE);
this.setValue(_relationship, "abstractFlag", true);
        break;
        }
      case ABSTRACT_FALSE:{
        jj_consume_token(ABSTRACT_FALSE);
this.setValue(_relationship, "abstractFlag", false);
        break;
        }
      case DERIVED:{
        jj_consume_token(DERIVED);
        str = string();
this.setValue(_relationship, "derived", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_relationship, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_relationship, "hidden", false);
        break;
        }
      case PREVENTDUPLICATES_TRUE:{
        jj_consume_token(PREVENTDUPLICATES_TRUE);
this.setValue(_relationship, "preventDuplicates", true);
        break;
        }
      case PREVENTDUPLICATES_FALSE:{
        jj_consume_token(PREVENTDUPLICATES_FALSE);
this.setValue(_relationship, "preventDuplicates", false);
        break;
        }
      case RULE:{
        jj_consume_token(RULE);
        str = string();
this.setValue(_relationship, "rule", str);
        break;
        }
      case TRIGGER:{
        jj_consume_token(TRIGGER);
        trigger = trigger();
this.appendValue(_relationship, "triggers", "triggersStack", trigger);
        break;
        }
      case FROM_WITH_BRACE:
      case TO_WITH_BRACE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FROM_WITH_BRACE:{
          jj_consume_token(FROM_WITH_BRACE);
fromTo = "from";
          break;
          }
        case TO_WITH_BRACE:{
          jj_consume_token(TO_WITH_BRACE);
fromTo = "to";
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPAGATECONNECTION_TRUE:
          case PROPAGATECONNECTION_FALSE:
          case PROPAGATEMODIFY_TRUE:
          case PROPAGATEMODIFY_FALSE:
          case REVISION:
          case CARDINALITY:
          case CLONE:
          case MEANING:
          case RELATIONSHIP:
          case TYPE:{
            ;
            break;
            }
          default:
            jj_la1[75] = jj_gen;
            break label_22;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PROPAGATEMODIFY_TRUE:{
            jj_consume_token(PROPAGATEMODIFY_TRUE);
this.setValue(_relationship, fromTo, "propagateModify", true);
            break;
            }
          case PROPAGATEMODIFY_FALSE:{
            jj_consume_token(PROPAGATEMODIFY_FALSE);
this.setValue(_relationship, fromTo, "propagateModify", false);
            break;
            }
          case PROPAGATECONNECTION_TRUE:{
            jj_consume_token(PROPAGATECONNECTION_TRUE);
this.setValue(_relationship, fromTo, "propagateConnection", true);
            break;
            }
          case PROPAGATECONNECTION_FALSE:{
            jj_consume_token(PROPAGATECONNECTION_FALSE);
this.setValue(_relationship, fromTo, "propagateConnection", false);
            break;
            }
          case MEANING:{
            jj_consume_token(MEANING);
            str = string();
this.setValue(_relationship, fromTo, "meaning", str);
            break;
            }
          case REVISION:{
            jj_consume_token(REVISION);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NONE:{
              jj_consume_token(NONE);
this.setValue(_relationship, fromTo, "revisionAction", "none");
              break;
              }
            case FLOAT:{
              jj_consume_token(FLOAT);
this.setValue(_relationship, fromTo, "revisionAction", "float");
              break;
              }
            case REPLICATE:{
              jj_consume_token(REPLICATE);
this.setValue(_relationship, fromTo, "revisionAction", "replicate");
              break;
              }
            default:
              jj_la1[76] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case CLONE:{
            jj_consume_token(CLONE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NONE:{
              jj_consume_token(NONE);
this.setValue(_relationship, fromTo, "cloneAction", "none");
              break;
              }
            case FLOAT:{
              jj_consume_token(FLOAT);
this.setValue(_relationship, fromTo, "cloneAction", "float");
              break;
              }
            case REPLICATE:{
              jj_consume_token(REPLICATE);
this.setValue(_relationship, fromTo, "cloneAction", "replicate");
              break;
              }
            default:
              jj_la1[77] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case CARDINALITY:{
            jj_consume_token(CARDINALITY);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ONE:{
              jj_consume_token(ONE);
this.setValue(_relationship, fromTo, "cardinality", "one");
              break;
              }
            case MANY:{
              jj_consume_token(MANY);
this.setValue(_relationship, fromTo, "cardinality", "many");
              break;
              }
            default:
              jj_la1[78] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case TYPE:{
            jj_consume_token(TYPE);
            str = string();
if ("all".equals(str)) {this.setValue(_relationship, fromTo, "typeAll",     true);} else {this.appendValue(_relationship, fromTo, "types",     str);}
            break;
            }
          case RELATIONSHIP:{
            jj_consume_token(RELATIONSHIP);
            str = string();
if ("all".equals(str)) {this.setValue(_relationship, fromTo, "relationAll", true);} else {this.appendValue(_relationship, fromTo, "relations", str);}
            break;
            }
          default:
            jj_la1[79] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(BRACE_CLOSE);
        break;
        }
      case ATTRIBUTE:{
        jj_consume_token(ATTRIBUTE);
        str = string();
this.appendValue(_relationship, "globalAttributes", str);
        break;
        }
      case LOCAL:{
        jj_consume_token(LOCAL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ATTRIBUTE:{
          jj_consume_token(ATTRIBUTE);
          localAttr = localAttribute();
this.appendValue(_relationship, "localAttributes", localAttr);
          break;
          }
        case PATHTYPE:{
          jj_consume_token(PATHTYPE);
          localPathType = localPathType();
this.appendValue(_relationship, "localPathTypes", localPathType);
          break;
          }
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_relationship, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/********************************************************* Data Model -> Rule */

/**
 * Parses one complete rule definition.
 *
 * @param _rule   target rule to update with parsed values
 */
  final public void parseRule(final Rule_mxJPO _rule) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    Access access;
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENFORCERESERVEACCESS_TRUE:
      case ENFORCERESERVEACCESS_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case LOGIN:
      case OWNER:
      case PUBLIC:
      case REVOKE:
      case USER:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_rule, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(this.getValue(_rule, "properties"), "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_rule, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_rule, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_rule, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_rule, "hidden", false);
        break;
        }
      case ENFORCERESERVEACCESS_TRUE:{
        jj_consume_token(ENFORCERESERVEACCESS_TRUE);
this.setValue(_rule, "enforcereserveaccess", true);
        break;
        }
      case ENFORCERESERVEACCESS_FALSE:{
        jj_consume_token(ENFORCERESERVEACCESS_FALSE);
this.setValue(_rule, "enforcereserveaccess", false);
        break;
        }
      case LOGIN:
      case OWNER:
      case PUBLIC:
      case REVOKE:
      case USER:{
        access = access();
this.appendValue(_rule, "accessList", "accessList", access);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_rule, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/********************************************************* Data Model -> Type */

/**
 * Parses one complete type definition.
 *
 * @param _type     target type to update with parsed values
 */
  final public void parseType(final Type_mxJPO _type) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    Trigger trigger;
    LocalAttribute localAttr;
    LocalPathType localPathType;
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT_TRUE:
      case ABSTRACT_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case LOCAL:
      case ATTRIBUTE:
      case DERIVED:
      case METHOD:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:
      case KIND:
      case TRIGGER:{
        ;
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_type, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(this.getValue(_type, "properties"), "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_type, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_type, "description", str);
        break;
        }
      case KIND:{
        jj_consume_token(KIND);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KIND_BASIC:{
          jj_consume_token(KIND_BASIC);
this.setValue(_type, "kind", Type_mxJPO.Kind.Basic);
          break;
          }
        case KIND_COMPOSED:{
          jj_consume_token(KIND_COMPOSED);
this.setValue(_type, "kind", Type_mxJPO.Kind.Composed);
          break;
          }
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ABSTRACT_TRUE:{
        jj_consume_token(ABSTRACT_TRUE);
this.setValue(_type, "abstractFlag", true);
        break;
        }
      case ABSTRACT_FALSE:{
        jj_consume_token(ABSTRACT_FALSE);
this.setValue(_type, "abstractFlag", false);
        break;
        }
      case DERIVED:{
        jj_consume_token(DERIVED);
        str = string();
this.setValue(_type, "derived", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_type, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_type, "hidden", false);
        break;
        }
      case TRIGGER:{
        jj_consume_token(TRIGGER);
        trigger = trigger();
this.appendValue(_type, "triggers", "triggersStack", trigger);
        break;
        }
      case METHOD:{
        jj_consume_token(METHOD);
        str = string();
this.appendValue(_type, "methods", str);
        break;
        }
      case ATTRIBUTE:{
        jj_consume_token(ATTRIBUTE);
        str = string();
this.appendValue(_type, "globalAttributes", str);
        break;
        }
      case LOCAL:{
        jj_consume_token(LOCAL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ATTRIBUTE:{
          jj_consume_token(ATTRIBUTE);
          localAttr = localAttribute();
this.appendValue(_type, "localAttributes", localAttr);
          break;
          }
        case PATHTYPE:{
          jj_consume_token(PATHTYPE);
          localPathType = localPathType();
this.appendValue(_type, "localPathTypes", localPathType);
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_type, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************************ Program -> Page */

/**
 * Parses one complete page definition.
 *
 * @param _file     parsed file
 * @param _page     target page to update with parsed values
 */
  final public void parsePage(final Page_mxJPO _page) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    AdminProperty property;
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case FILE:
      case MIME:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case CONTENT:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[88] = jj_gen;
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_page, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_page, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_page, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_page, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_page, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_page, "hidden", false);
        break;
        }
      case MIME:{
        jj_consume_token(MIME);
        str = string();
this.setValue(_page, "mimeType", str);
        break;
        }
      case CONTENT:{
        jj_consume_token(CONTENT);
        str = multiLineString();
this.setValue(_page, "code", str);
        break;
        }
      case FILE:{
        jj_consume_token(FILE);
        str = string();
this.setValue(_page, "file", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_page, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/********************************************************* Program -> Program */

/**
 * Parses one complete program definition.
 *
 * @param _page     target program to update with parsed values
 */
  final public void parseProgram(final ProgramCI_mxJPO _prog) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    AdminProperty property;
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOWNLOADABLE_TRUE:
      case DOWNLOADABLE_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case NEEDSBUSINESSOBJECT_TRUE:
      case NEEDSBUSINESSOBJECT_FALSE:
      case PIPE_TRUE:
      case PIPE_FALSE:
      case POOLED_TRUE:
      case POOLED_FALSE:
      case EXECUTE:
      case FILE:
      case PACKAGE:
      case RULE:
      case SYMBOLICNAME:
      case UUID:
      case CODE:
      case DESCRIPTION:
      case PROPERTY:
      case KIND:{
        ;
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_prog, "packageRef", str);
        break;
        }
      case KIND:{
        jj_consume_token(KIND);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KIND_EKL:{
          jj_consume_token(KIND_EKL);
this.setValue(_prog, "kind", ProgramCI_mxJPO.Kind.EKL);
          break;
          }
        case KIND_EXTERNAL:{
          jj_consume_token(KIND_EXTERNAL);
this.setValue(_prog, "kind", ProgramCI_mxJPO.Kind.EXTERNAL);
          break;
          }
        case KIND_MQL:{
          jj_consume_token(KIND_MQL);
this.setValue(_prog, "kind", ProgramCI_mxJPO.Kind.MQL);
          break;
          }
        case KIND_JAVA:{
          jj_consume_token(KIND_JAVA);
this.setValue(_prog, "kind", ProgramCI_mxJPO.Kind.JAVA);
          break;
          }
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_prog, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_prog, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_prog, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_prog, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_prog, "hidden", false);
        break;
        }
      case NEEDSBUSINESSOBJECT_TRUE:{
        jj_consume_token(NEEDSBUSINESSOBJECT_TRUE);
this.setValue(_prog, "needsBusinessObjectContext", true);
        break;
        }
      case NEEDSBUSINESSOBJECT_FALSE:{
        jj_consume_token(NEEDSBUSINESSOBJECT_FALSE);
this.setValue(_prog, "needsBusinessObjectContext", false);
        break;
        }
      case DOWNLOADABLE_TRUE:{
        jj_consume_token(DOWNLOADABLE_TRUE);
this.setValue(_prog, "downloadable", true);
        break;
        }
      case DOWNLOADABLE_FALSE:{
        jj_consume_token(DOWNLOADABLE_FALSE);
this.setValue(_prog, "downloadable", false);
        break;
        }
      case PIPE_TRUE:{
        jj_consume_token(PIPE_TRUE);
this.setValue(_prog, "pipe", true);
        break;
        }
      case PIPE_FALSE:{
        jj_consume_token(PIPE_FALSE);
this.setValue(_prog, "pipe", false);
        break;
        }
      case POOLED_TRUE:{
        jj_consume_token(POOLED_TRUE);
this.setValue(_prog, "pooled", true);
        break;
        }
      case POOLED_FALSE:{
        jj_consume_token(POOLED_FALSE);
this.setValue(_prog, "pooled", false);
        break;
        }
      case RULE:{
        jj_consume_token(RULE);
        str = string();
this.setValue(_prog, "rule", str);
        break;
        }
      case EXECUTE:{
        jj_consume_token(EXECUTE);
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DEFERRED:
          case IMMEDIATE:
          case USER:{
            ;
            break;
            }
          default:
            jj_la1[92] = jj_gen;
            break label_27;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IMMEDIATE:{
            jj_consume_token(IMMEDIATE);
this.setValue(_prog, "execute", ProgramCI_mxJPO.Execute.IMMEDIATE);
            break;
            }
          case DEFERRED:{
            jj_consume_token(DEFERRED);
this.setValue(_prog, "execute", ProgramCI_mxJPO.Execute.DEFERRED);
            break;
            }
          case USER:{
            jj_consume_token(USER);
            str = string();
this.setValue(_prog, "user", str);
            break;
            }
          default:
            jj_la1[93] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      case CODE:{
        jj_consume_token(CODE);
        str = multiLineString();
this.setValue(_prog, "code", str);
        break;
        }
      case FILE:{
        jj_consume_token(FILE);
        str = string();
this.setValue(_prog, "file", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_prog, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************************ System -> Index */

/**
 * Parses one complete package definition.
 *
 * @param _uniqueKey      target package to update with parsed values
 */
  final public void parseIndex(final IndexCI_mxJPO _index) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Integer number;
    IndexCI_mxJPO.Field field;
    AdminProperty property;
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENABLE_TRUE:
      case ENABLE_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case UNIQUE_TRUE:
      case UNIQUE_FALSE:
      case FIELD:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[95] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_index, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_index, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_index, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_index, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_index, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_index, "hidden", false);
        break;
        }
      case ENABLE_TRUE:{
        jj_consume_token(ENABLE_TRUE);
this.setValue(_index, "enable", true);
        break;
        }
      case ENABLE_FALSE:{
        jj_consume_token(ENABLE_FALSE);
this.setValue(_index, "enable", false);
        break;
        }
      case UNIQUE_TRUE:{
        jj_consume_token(UNIQUE_TRUE);
this.setValue(_index, "unique", true);
        break;
        }
      case UNIQUE_FALSE:{
        jj_consume_token(UNIQUE_FALSE);
this.setValue(_index, "unique", false);
        break;
        }
      case FIELD:{
        jj_consume_token(FIELD);
        str = string();
field = new IndexCI_mxJPO.Field();this.appendValue(_index, "fields", field);this.setValue(field, "expression", str);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZE:{
          jj_consume_token(SIZE);
          number = naturalNumber();
this.setValue(field, "size", number);
          break;
          }
        default:
          jj_la1[96] = jj_gen;
          ;
        }
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_index, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/********************************************************** System -> Package */

/**
 * Parses one complete package definition.
 *
 * @param _package      target package to update with parsed values
 */
  final public void parsePackage(final PackageCI_mxJPO _package) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CUSTOM_TRUE:
      case CUSTOM_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case SYMBOLICNAME:
      case USESPACKAGE:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_package, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_package, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_package, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_package, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_package, "hidden", false);
        break;
        }
      case CUSTOM_TRUE:{
        jj_consume_token(CUSTOM_TRUE);
this.setValue(_package, "custom", true);
        break;
        }
      case CUSTOM_FALSE:{
        jj_consume_token(CUSTOM_FALSE);
this.setValue(_package, "custom", false);
        break;
        }
      case USESPACKAGE:{
        jj_consume_token(USESPACKAGE);
        str = string();
this.appendValue(_package, "usesPackages", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_package, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/******************************************************* System -> Unique Key */

/**
 * Parses one complete unique key definition.
 *
 * @param _uniqueKey      target unique key to update with parsed values
 */
  final public void parseUniqueKey(final UniqueKeyCI_mxJPO _uniqueKey) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Integer number;
    UniqueKeyCI_mxJPO.Field field;
    AdminProperty property;
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENABLE_TRUE:
      case ENABLE_FALSE:
      case GLOBAL_TRUE:
      case GLOBAL_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case FIELD:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:
      case FOR:
      case WITH:{
        ;
        break;
        }
      default:
        jj_la1[100] = jj_gen;
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_uniqueKey, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_uniqueKey, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_uniqueKey, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_uniqueKey, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_uniqueKey, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_uniqueKey, "hidden", false);
        break;
        }
      case ENABLE_TRUE:{
        jj_consume_token(ENABLE_TRUE);
this.setValue(_uniqueKey, "enable", true);
        break;
        }
      case ENABLE_FALSE:{
        jj_consume_token(ENABLE_FALSE);
this.setValue(_uniqueKey, "enable", false);
        break;
        }
      case GLOBAL_TRUE:{
        jj_consume_token(GLOBAL_TRUE);
this.setValue(_uniqueKey, "global", true);
        break;
        }
      case GLOBAL_FALSE:{
        jj_consume_token(GLOBAL_FALSE);
this.setValue(_uniqueKey, "global", false);
        break;
        }
      case FOR:{
        jj_consume_token(FOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FOR_RELATIONSHIP:{
          jj_consume_token(FOR_RELATIONSHIP);
          str = string();
this.setValue(_uniqueKey, "forRelation", str);
          break;
          }
        case FOR_TYPE:{
          jj_consume_token(FOR_TYPE);
          str = string();
this.setValue(_uniqueKey, "forType", str);
          break;
          }
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case WITH:{
        jj_consume_token(WITH);
        jj_consume_token(WITH_INTERFACE);
        str = string();
this.setValue(_uniqueKey, "withInterface", str);
        break;
        }
      case FIELD:{
        jj_consume_token(FIELD);
        str = string();
field = new UniqueKeyCI_mxJPO.Field();this.appendValue(_uniqueKey, "fields", field);this.setValue(field, "expression", str);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZE:{
          jj_consume_token(SIZE);
          number = naturalNumber();
this.setValue(field, "size", number);
          break;
          }
        default:
          jj_la1[102] = jj_gen;
          ;
        }
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_uniqueKey, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/******************************************************** User -> Association */

/**
 * Parses one complete association definition.
 *
 * @param _role     target association to update with parsed values
 */
  final public void parseAssociation(final Association_mxJPO _role) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case DEFINITION:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[104] = jj_gen;
        break label_31;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_role, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_role, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_role, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_role, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_role, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_role, "hidden", false);
        break;
        }
      case DEFINITION:{
        jj_consume_token(DEFINITION);
        str = string();
this.setValue(_role, "definition", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_role, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************************** User -> Group */

/**
 * Parses one complete group definition.
 *
 * @param _group    target group to update with parsed values
 */
  final public void parseGroup(final Group_mxJPO _group) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case PACKAGE:
      case PARENT:
      case SITE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[106] = jj_gen;
        break label_32;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_group, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_group, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_group, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_group, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_group, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_group, "hidden", false);
        break;
        }
      case SITE:{
        jj_consume_token(SITE);
        str = string();
this.setValue(_group, "site", str);
        break;
        }
      case PARENT:{
        jj_consume_token(PARENT);
        str = string();
this.appendValue(_group, "parentGroups", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_group, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************************* User -> Person */

/**
 * Parses one complete person definition.
 *
 * @param _person  target admin person to update with parsed values
 */
  final public void parsePerson(final PersonCI_mxJPO _person) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    AdminProperty property;
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ACTIVE_TRUE:
      case ACTIVE_FALSE:
      case EMAIL_TRUE:
      case EMAIL_FALSE:
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case INCONMAIL_TRUE:
      case INCONMAIL_FALSE:
      case TRUSTED_TRUE:
      case TRUSTED_FALSE:
      case ADDRESS:
      case APPLICATION:
      case EMAILADDRESS:
      case FAX:
      case FULLNAME:
      case GROUP:
      case PACKAGE:
      case PHONE:
      case ROLE:
      case SITE:
      case SYMBOLICNAME:
      case UUID:
      case VAULT:
      case COMMENT:
      case PROPERTY:
      case ACCESS:
      case ADMIN:
      case PRODUCT:
      case TYPE:{
        ;
        break;
        }
      default:
        jj_la1[108] = jj_gen;
        break label_33;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_person, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_person, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_person, "symbolicNames", str);
        break;
        }
      case COMMENT:{
        jj_consume_token(COMMENT);
        str = multiLineString();
this.setValue(_person, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_person, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_person, "hidden", false);
        break;
        }
      case ACTIVE_TRUE:{
        jj_consume_token(ACTIVE_TRUE);
this.setValue(_person, "active", true);
        break;
        }
      case ACTIVE_FALSE:{
        jj_consume_token(ACTIVE_FALSE);
this.setValue(_person, "active", false);
        break;
        }
      case TRUSTED_TRUE:{
        jj_consume_token(TRUSTED_TRUE);
this.setValue(_person, "trusted", true);
        break;
        }
      case TRUSTED_FALSE:{
        jj_consume_token(TRUSTED_FALSE);
this.setValue(_person, "trusted", false);
        break;
        }
      case ACCESS:{
        jj_consume_token(ACCESS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ACCESS_ALL:{
          jj_consume_token(ACCESS_ALL);
this.clearValues(_person, "access");this.appendValue(_person, "access", "all");
          break;
          }
        case ACCESS_OPEN:{
          jj_consume_token(ACCESS_OPEN);
this.clearValues(_person, "access");
          label_34:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ACCESS_EXPECTED_SINGLE:{
              ;
              break;
              }
            default:
              jj_la1[109] = jj_gen;
              break label_34;
            }
            tmp = jj_consume_token(ACCESS_EXPECTED_SINGLE);
this.appendValue(_person, "access", this.getString(tmp.image));
          }
          jj_consume_token(ACCESS_CLOSE);
          break;
          }
        default:
          jj_la1[110] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case ADMIN:{
        jj_consume_token(ADMIN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADMIN_ALL:{
          jj_consume_token(ADMIN_ALL);
this.clearValues(_person, "admin");this.appendValue(_person, "admin", "all");
          break;
          }
        case ADMIN_OPEN:{
          jj_consume_token(ADMIN_OPEN);
this.clearValues(_person, "admin");
          label_35:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ADMIN_EXPECTED_SINGLE:{
              ;
              break;
              }
            default:
              jj_la1[111] = jj_gen;
              break label_35;
            }
            tmp = jj_consume_token(ADMIN_EXPECTED_SINGLE);
this.appendValue(_person, "admin", this.getString(tmp.image));
          }
          jj_consume_token(ADMIN_CLOSE);
          break;
          }
        default:
          jj_la1[112] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case EMAIL_TRUE:{
        jj_consume_token(EMAIL_TRUE);
this.setValue(_person, "email", true);
        break;
        }
      case EMAIL_FALSE:{
        jj_consume_token(EMAIL_FALSE);
this.setValue(_person, "email", false);
        break;
        }
      case INCONMAIL_TRUE:{
        jj_consume_token(INCONMAIL_TRUE);
this.setValue(_person, "iconmail", true);
        break;
        }
      case INCONMAIL_FALSE:{
        jj_consume_token(INCONMAIL_FALSE);
this.setValue(_person, "iconmail", false);
        break;
        }
      case ADDRESS:{
        jj_consume_token(ADDRESS);
        str = string();
this.setValue(_person, "address", str);
        break;
        }
      case EMAILADDRESS:{
        jj_consume_token(EMAILADDRESS);
        str = string();
this.setValue(_person, "emailAddress", str);
        break;
        }
      case FAX:{
        jj_consume_token(FAX);
        str = string();
this.setValue(_person, "fax", str);
        break;
        }
      case FULLNAME:{
        jj_consume_token(FULLNAME);
        str = string();
this.setValue(_person, "fullName", str);
        break;
        }
      case PHONE:{
        jj_consume_token(PHONE);
        str = string();
this.setValue(_person, "phone", str);
        break;
        }
      case PRODUCT:{
        jj_consume_token(PRODUCT);
        jj_consume_token(PRODUCT_OPEN);
        label_36:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PRODUCT_EXPECTED_SINGLE:{
            ;
            break;
            }
          default:
            jj_la1[113] = jj_gen;
            break label_36;
          }
          tmp = jj_consume_token(PRODUCT_EXPECTED_SINGLE);
this.appendValue(_person, "products", this.getString(tmp.image));
        }
        jj_consume_token(PRODUCT_CLOSE);
        break;
        }
      case TYPE:{
        jj_consume_token(TYPE);
        jj_consume_token(TYPE_OPEN);
this.clearValues(_person, "types");
        label_37:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TYPE_APPLICATION:
          case TYPE_FULL:
          case TYPE_BUSINESS:
          case TYPE_SYSTEM:{
            ;
            break;
            }
          default:
            jj_la1[114] = jj_gen;
            break label_37;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TYPE_APPLICATION:{
            jj_consume_token(TYPE_APPLICATION);
this.appendValue(_person, "types", TypeItem.APPLICATION);
            break;
            }
          case TYPE_FULL:{
            jj_consume_token(TYPE_FULL);
this.appendValue(_person, "types", TypeItem.FULL);
            break;
            }
          case TYPE_BUSINESS:{
            jj_consume_token(TYPE_BUSINESS);
this.appendValue(_person, "types", TypeItem.BUSINESS);
            break;
            }
          case TYPE_SYSTEM:{
            jj_consume_token(TYPE_SYSTEM);
this.appendValue(_person, "types", TypeItem.SYSTEM);
            break;
            }
          default:
            jj_la1[115] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(TYPE_CLOSE);
        break;
        }
      case VAULT:{
        jj_consume_token(VAULT);
        str = string();
this.setValue(_person, "vault", str);
        break;
        }
      case APPLICATION:{
        jj_consume_token(APPLICATION);
        str = string();
this.setValue(_person, "application", str);
        break;
        }
      case SITE:{
        jj_consume_token(SITE);
        str = string();
this.setValue(_person, "site", str);
        break;
        }
      case GROUP:{
        jj_consume_token(GROUP);
        str = string();
this.appendValue(_person, "groups", str);
        break;
        }
      case ROLE:{
        jj_consume_token(ROLE);
        str = string();
this.appendValue(_person, "roles", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_person, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************************* User -> Role * */

/**
 * Parses one complete role definition.
 *
 * @param _role     target role to update with parsed values
 */
  final public void parseRole(final Role_mxJPO _role) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case PACKAGE:
      case PARENT:
      case SITE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:
      case KIND:{
        ;
        break;
        }
      default:
        jj_la1[117] = jj_gen;
        break label_38;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_role, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_role, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_role, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_role, "description", str);
        break;
        }
      case KIND:{
        jj_consume_token(KIND);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case KIND_ORGANIZATION:{
          jj_consume_token(KIND_ORGANIZATION);
this.setValue(_role, "kind", Role_mxJPO.Kind.Organization);
          break;
          }
        case KIND_PROJECT:{
          jj_consume_token(KIND_PROJECT);
this.setValue(_role, "kind", Role_mxJPO.Kind.Project);
          break;
          }
        case KIND_ROLE:{
          jj_consume_token(KIND_ROLE);
this.setValue(_role, "kind", Role_mxJPO.Kind.Role);
          break;
          }
            case KIND_PROJECT_GROUP: {
                jj_consume_token(KIND_PROJECT_GROUP);
                this.setValue(_role, "kind", Role_mxJPO.Kind.GroupProject);
                break;
            }
        default:
          jj_la1[118] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_role, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_role, "hidden", false);
        break;
        }
      case SITE:{
        jj_consume_token(SITE);
        str = string();
this.setValue(_role, "site", str);
        break;
        }
      case PARENT:{
        jj_consume_token(PARENT);
        str = string();
this.appendValue(_role, "parentRoles", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_role, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************** User Interface -> Channel */

/**
 * Parses one complete menu definition.
 *
 * @param _channel     target menu to update with parsed values
 */
  final public void parseChannel(Channel_mxJPO _channel) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    AdminProperty property;
    CommandRef ref;
    Integer number;
    int refIdx = 0;
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case HEIGHT:
      case SETTING:
      case ALT:
      case COMMAND:
      case HREF:
      case LABEL:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[120] = jj_gen;
        break label_39;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_channel, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_channel, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_channel, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_channel, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_channel, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_channel, "hidden", false);
        break;
        }
      case LABEL:{
        jj_consume_token(LABEL);
        str = string();
this.setValue(_channel, "label", str);
        break;
        }
      case ALT:{
        jj_consume_token(ALT);
        str = string();
this.setValue(_channel, "alt", str);
        break;
        }
      case HREF:{
        jj_consume_token(HREF);
        str = string();
this.setValue(_channel, "href", str);
        break;
        }
      case HEIGHT:{
        jj_consume_token(HEIGHT);
        number = naturalNumber();
this.setValue(_channel, "height", number);
        break;
        }
      case SETTING:{
        jj_consume_token(SETTING);
        property = settingProperty();
this.appendValue(_channel, "properties", "propertiesStack", property);
        break;
        }
      case COMMAND:{
        jj_consume_token(COMMAND);
        str = string();
ref = new CommandRef();this.setValue(ref, "column", refIdx++);this.appendValue(_channel, "children", "childrenStack", ref);this.setValue(ref, "name", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_channel, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************** User Interface -> Command */

/**
 * Parses one complete command definition.
 *
 * @param _command  target command to update with parsed values
 */
  final public void parseCommand(Command_mxJPO _command) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case USER:
      case SETTING:
      case ALT:
      case HREF:
      case LABEL:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case CODE:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[122] = jj_gen;
        break label_40;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_command, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_command, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_command, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_command, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_command, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_command, "hidden", false);
        break;
        }
      case ALT:{
        jj_consume_token(ALT);
        str = string();
this.setValue(_command, "alt", str);
        break;
        }
      case HREF:{
        jj_consume_token(HREF);
        str = string();
this.setValue(_command, "href", str);
        break;
        }
      case LABEL:{
        jj_consume_token(LABEL);
        str = string();
this.setValue(_command, "label", str);
        break;
        }
      case USER:{
        jj_consume_token(USER);
        str = string();
this.appendValue(_command, "users", str);
        break;
        }
      case SETTING:{
        jj_consume_token(SETTING);
        property = settingProperty();
this.appendValue(_command, "properties", "propertiesStack", property);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_command, "properties", "propertiesStack", property);
        break;
        }
      case CODE:{
        jj_consume_token(CODE);
        str = multiLineString();
this.setValue(_command, "code", str);
        break;
        }
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/***************************************************** User Interface -> Form */

/**
 * Parses one complete form definition.
 *
 * @param _form    target form to update with parsed values
 */
  final public void parseForm(final Form_mxJPO _form) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str,str2;
    AdminProperty property;
    Form_mxJPO.Field field;
    Setting setting;
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case FIELD:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[124] = jj_gen;
        break label_41;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_form, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_form, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_form, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_form, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_form, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_form, "hidden", false);
        break;
        }
      case FIELD:{
        jj_consume_token(FIELD);
token_source.SwitchTo(DEFAULT);
        jj_consume_token(BRACE_OPEN);
field = new Form_mxJPO.Field(); this.appendValue(_form, "fields", field);
        label_42:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case USER:
          case SETTING:
          case ALT:
          case BUSINESSOBJECT:
          case HREF:
          case LABEL:
          case NAME:
          case RANGE:
          case RELATIONSHIP:
          case SELECT:{
            ;
            break;
            }
          default:
            jj_la1[125] = jj_gen;
            break label_42;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NAME:{
            jj_consume_token(NAME);
            str = string();
this.setValue(field, "name", str);
            break;
            }
          case LABEL:{
            jj_consume_token(LABEL);
            str = string();
this.setValue(field, "label", str);
            break;
            }
          case SELECT:{
            jj_consume_token(SELECT);
            str = string();
this.setValue(field, "expression", str);this.setValue(field, "expressionType",  ExpressionType.SELECT);
            break;
            }
          case BUSINESSOBJECT:{
            jj_consume_token(BUSINESSOBJECT);
            str = string();
this.setValue(field, "expression", str);this.setValue(field, "expressionType",  ExpressionType.BUSINESSOBJECT);
            break;
            }
          case RELATIONSHIP:{
            jj_consume_token(RELATIONSHIP);
            str = string();
this.setValue(field, "expression", str);this.setValue(field, "expressionType",  ExpressionType.RELATIONSHIP);
            break;
            }
          case RANGE:{
            jj_consume_token(RANGE);
            str = string();
this.setValue(field, "range", str);
            break;
            }
          case HREF:{
            jj_consume_token(HREF);
            str = string();
this.setValue(field, "href", str);
            break;
            }
          case ALT:{
            jj_consume_token(ALT);
            str = string();
this.setValue(field, "alt", str);
            break;
            }
          case USER:{
            jj_consume_token(USER);
            str = string();
this.appendValue(field, "users", str);
            break;
            }
          case SETTING:{
            jj_consume_token(SETTING);
            str = stringString();
            str2 = string();
setting = new Setting();this.appendValue(field, "settings", setting);this.setValue(setting, "name", str);this.setValue(setting, "value", str2);
            break;
            }
          default:
            jj_la1[126] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(BRACE_CLOSE);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_form, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/************************************************** User Interface -> Inquiry */

/**
 * Parses one complete inquiry definition.
 *
 * @param _inquiry  target inquiry to update with parsed values
 */
  final public void parseInquiry(final Inquiry_mxJPO _inquiry) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case ARGUMENT:
      case FORMAT:
      case PACKAGE:
      case PATTERN:
      case SYMBOLICNAME:
      case UUID:
      case CODE:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[128] = jj_gen;
        break label_43;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_inquiry, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_inquiry, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_inquiry, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_inquiry, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_inquiry, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_inquiry, "hidden", false);
        break;
        }
      case PATTERN:{
        jj_consume_token(PATTERN);
        str = string();
this.setValue(_inquiry, "pattern", str);
        break;
        }
      case FORMAT:{
        jj_consume_token(FORMAT);
        str = string();
this.setValue(_inquiry, "format", str);
        break;
        }
      case CODE:{
        jj_consume_token(CODE);
        str = multiLineString();
this.setValue(_inquiry, "code", str);
        break;
        }
      case ARGUMENT:{
        jj_consume_token(ARGUMENT);
        property = settingProperty();
this.appendValue(_inquiry, "properties", "propertiesStack", property);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_inquiry, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[129] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/***************************************************** User Interface -> Menu */

/**
 * Parses one complete menu definition.
 *
 * @param _menu     target menu to update with parsed values
 */
  final public void parseMenu(Menu_mxJPO _menu) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    AbstractRef ref;
    int refIdx = 0;
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case TREEMENU_TRUE:
      case TREEMENU_FALSE:
      case SETTING:
      case ALT:
      case COMMAND:
      case HREF:
      case LABEL:
      case MENU:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[130] = jj_gen;
        break label_44;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_menu, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_menu, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_menu, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_menu, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_menu, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_menu, "hidden", false);
        break;
        }
      case TREEMENU_TRUE:{
        jj_consume_token(TREEMENU_TRUE);
this.setValue(_menu, "treeMenu", true);
        break;
        }
      case TREEMENU_FALSE:{
        jj_consume_token(TREEMENU_FALSE);
this.setValue(_menu, "treeMenu", false);
        break;
        }
      case ALT:{
        jj_consume_token(ALT);
        str = string();
this.setValue(_menu, "alt", str);
        break;
        }
      case HREF:{
        jj_consume_token(HREF);
        str = string();
this.setValue(_menu, "href", str);
        break;
        }
      case LABEL:{
        jj_consume_token(LABEL);
        str = string();
this.setValue(_menu, "label", str);
        break;
        }
      case SETTING:{
        jj_consume_token(SETTING);
        property = settingProperty();
this.appendValue(_menu, "properties", "propertiesStack", property);
        break;
        }
      case COMMAND:{
        jj_consume_token(COMMAND);
        str = string();
ref = new CommandRef();this.setValue(ref, "column", refIdx++);this.appendValue(_menu, "children", "childrenStack", ref);this.setValue(ref, "name", str);
        break;
        }
      case MENU:{
        jj_consume_token(MENU);
        str = string();
ref = new MenuRef();   this.setValue(ref, "column", refIdx++);this.appendValue(_menu, "children", "childrenStack", ref);this.setValue(ref, "name", str);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_menu, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*************************************************** User Interface -> Portal */

/**
 * Parses one complete portal definition.
 *
 * @param _portal     target portal to update with parsed values
 */
  final public void parsePortal(Portal_mxJPO _portal) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    AdminProperty property;
    ChannelRef ref;
    int refRowIdx = 0, refColIdx = 0;
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case NEWROW:
      case SETTING:
      case ALT:
      case CHANNEL:
      case HREF:
      case LABEL:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[132] = jj_gen;
        break label_45;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_portal, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_portal, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_portal, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_portal, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_portal, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_portal, "hidden", false);
        break;
        }
      case ALT:{
        jj_consume_token(ALT);
        str = string();
this.setValue(_portal, "alt", str);
        break;
        }
      case HREF:{
        jj_consume_token(HREF);
        str = string();
this.setValue(_portal, "href", str);
        break;
        }
      case LABEL:{
        jj_consume_token(LABEL);
        str = string();
this.setValue(_portal, "label", str);
        break;
        }
      case SETTING:{
        jj_consume_token(SETTING);
        property = settingProperty();
this.appendValue(_portal, "properties", "propertiesStack", property);
        break;
        }
      case CHANNEL:{
        jj_consume_token(CHANNEL);
        str = string();
ref = new ChannelRef();this.setValue(ref, "column", refColIdx++);this.setValue(ref, "row", refRowIdx);this.appendValue(_portal, "children", "childrenStack", ref);this.setValue(ref, "name", str);
        break;
        }
      case NEWROW:{
        jj_consume_token(NEWROW);
refRowIdx++;refColIdx = 0;
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_portal, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[133] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/***************************************************** User Interface -> Table */

/**
 * Parses one complete table definition.
 *
 * @param _table    target table to update with parsed values
 */
  final public void parseTable(final Table_mxJPO _table) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str,str2;
    Token tmp;
    AdminProperty property;
    Table_mxJPO.Column column;
    Setting setting;
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HIDDEN_TRUE:
      case HIDDEN_FALSE:
      case COLUMN:
      case PACKAGE:
      case SYMBOLICNAME:
      case UUID:
      case DESCRIPTION:
      case PROPERTY:{
        ;
        break;
        }
      default:
        jj_la1[134] = jj_gen;
        break label_46;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        str = string();
this.setValue(_table, "packageRef", str);
        break;
        }
      case UUID:{
        jj_consume_token(UUID);
        property = uuidProperty();
this.appendValue(_table, "properties", "propertiesStack", property);
        break;
        }
      case SYMBOLICNAME:{
        jj_consume_token(SYMBOLICNAME);
        str = string();
this.appendValue(_table, "symbolicNames", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_table, "description", str);
        break;
        }
      case HIDDEN_TRUE:{
        jj_consume_token(HIDDEN_TRUE);
this.setValue(_table, "hidden", true);
        break;
        }
      case HIDDEN_FALSE:{
        jj_consume_token(HIDDEN_FALSE);
this.setValue(_table, "hidden", false);
        break;
        }
      case COLUMN:{
        jj_consume_token(COLUMN);
column = new Table_mxJPO.Column();this.appendValue(_table, "fields", column);
        jj_consume_token(BRACE_OPEN);
        label_47:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case HIDDEN_TRUE:
          case HIDDEN_FALSE:
          case USER:
          case SETTING:
          case ALT:
          case BUSINESSOBJECT:
          case HREF:
          case LABEL:
          case NAME:
          case RANGE:
          case RELATIONSHIP:
          case SELECT:
          case SORTTYPE:{
            ;
            break;
            }
          default:
            jj_la1[135] = jj_gen;
            break label_47;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NAME:{
            jj_consume_token(NAME);
            str = string();
this.setValue(column, "name", str);
            break;
            }
          case LABEL:{
            jj_consume_token(LABEL);
            str = string();
this.setValue(column, "label", str);
            break;
            }
          case SELECT:{
            jj_consume_token(SELECT);
            str = string();
this.setValue(column, "expression", str);this.setValue(column, "expressionType", ExpressionType.SELECT);
            break;
            }
          case BUSINESSOBJECT:{
            jj_consume_token(BUSINESSOBJECT);
            str = string();
this.setValue(column, "expression", str);this.setValue(column, "expressionType", ExpressionType.BUSINESSOBJECT);
            break;
            }
          case RELATIONSHIP:{
            jj_consume_token(RELATIONSHIP);
            str = string();
this.setValue(column, "expression", str);this.setValue(column, "expressionType", ExpressionType.RELATIONSHIP);
            break;
            }
          case RANGE:{
            jj_consume_token(RANGE);
            str = string();
this.setValue(column, "range", str);
            break;
            }
          case HREF:{
            jj_consume_token(HREF);
            str = string();
this.setValue(column, "href", str);
            break;
            }
          case ALT:{
            jj_consume_token(ALT);
            str = string();
this.setValue(column, "alt", str);
            break;
            }
          case HIDDEN_TRUE:{
            jj_consume_token(HIDDEN_TRUE);
this.setValue(column, "hidden", true);
            break;
            }
          case HIDDEN_FALSE:{
            jj_consume_token(HIDDEN_FALSE);
this.setValue(column, "hidden", false);
            break;
            }
          case USER:{
            jj_consume_token(USER);
            str = string();
this.appendValue(column, "users", str);
            break;
            }
          case SORTTYPE:{
            jj_consume_token(SORTTYPE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SORTTYPE_ALPHA:{
              jj_consume_token(SORTTYPE_ALPHA);
this.setValue(column, "sortType", SortType.ALPHANUMERIC);
              break;
              }
            case SORTTYPE_NUMERIC:{
              jj_consume_token(SORTTYPE_NUMERIC);
this.setValue(column, "sortType", SortType.NUMERIC);
              break;
              }
            case SORTTYPE_OTHER:{
              jj_consume_token(SORTTYPE_OTHER);
this.setValue(column, "sortType", SortType.OTHER);
              break;
              }
            case SORTTYPE_NONE:{
              jj_consume_token(SORTTYPE_NONE);
this.setValue(column, "sortType", SortType.NONE);
              break;
              }
            default:
              jj_la1[136] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case SETTING:{
            jj_consume_token(SETTING);
            str = stringString();
            str2 = string();
setting = new Setting();this.appendValue(column, "settings", setting);this.setValue(setting, "name", str);this.setValue(setting, "value", str2);
            break;
            }
          default:
            jj_la1[137] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(BRACE_CLOSE);
        break;
        }
      case PROPERTY:{
        jj_consume_token(PROPERTY);
        property = property();
this.appendValue(_table, "properties", "propertiesStack", property);
        break;
        }
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**************************************************************************** */

/**
 * Parses one complete business object definition.
 *
 * @param _busObject  target business object to update with parsed values
 */
  final public void parseBusObject(BusObject_mxJPO _busObject) throws ParseException, SecurityException, IllegalArgumentException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {String str;
    Token tmp;
    BusObject_mxJPO.Connection connection;
    String attrName;
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATTRIBUTE:
      case CONNECTION:
      case CURRENT:
      case DESCRIPTION:
      case TYPE:{
        ;
        break;
        }
      default:
        jj_la1[139] = jj_gen;
        break label_48;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TYPE:{
        jj_consume_token(TYPE);
        str = string();
this.setValue(_busObject, "busType", str);
        break;
        }
      case DESCRIPTION:{
        jj_consume_token(DESCRIPTION);
        str = multiLineString();
this.setValue(_busObject, "description", str);
        break;
        }
      case CURRENT:{
        jj_consume_token(CURRENT);
        str = string();
this.setValue(_busObject, "busCurrent", str);
        break;
        }
      case ATTRIBUTE:{
        jj_consume_token(ATTRIBUTE);
token_source.SwitchTo(STRING_STRING_EXPECTED);
        attrName = stringString();
        str = multiLineString();
this.putValue(_busObject, "attrValues", attrName, str);
        break;
        }
      case CONNECTION:{
        jj_consume_token(CONNECTION);
        str = string();
connection = new BusObject_mxJPO.Connection();this.appendValue(_busObject, "connections", connection);this.setValue(connection, "relName", str);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FROM:{
          tmp = jj_consume_token(FROM);
          break;
          }
        case TO:{
          tmp = jj_consume_token(TO);
          break;
          }
        default:
          jj_la1[140] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
this.setValue(connection, "direction", tmp.image);token_source.SwitchTo(STRING_EXPECTED);
        str = string();
this.setValue(connection, "type", str);token_source.SwitchTo(STRING_EXPECTED);
        str = string();
this.setValue(connection, "name", str);token_source.SwitchTo(STRING_EXPECTED);
        str = string();
this.setValue(connection, "revision", str);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BRACE_OPEN:{
          jj_consume_token(BRACE_OPEN);
          label_49:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ATTRIBUTE:{
              ;
              break;
              }
            default:
              jj_la1[141] = jj_gen;
              break label_49;
            }
            jj_consume_token(ATTRIBUTE);
token_source.SwitchTo(STRING_STRING_EXPECTED);
            attrName = stringString();
            str = multiLineString();
this.putValue(connection, "attrValues", attrName, str);
          }
          jj_consume_token(BRACE_CLOSE);
          break;
          }
        default:
          jj_la1[142] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[143] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MxParserTokenManager_mxJPO token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[144];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
      jj_la1_init_8();
      jj_la1_init_9();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x0,0x6000000,0x6000000,0x6000000,0x6000060,0x0,0x6000060,0x6000000,0x0,0x0,0x0,0x0,0x0,0x6000000,0x6180000,0x0,0x0,0x0,0x6180000,0xe0600600,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0600600,0x6000060,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000060,0x6600000,0x6600000,0x6000060,0x0,0x0,0x6000060,0x6000000,0x6000000,0x6006000,0x0,0x0,0x0,0x6006000,0x6060000,0x0,0x6060000,0x6001800,0x6001800,0x7860000,0x0,0x0,0x7860000,0x6000000,0x6000000,0x6000000,0x6000000,0x1e018180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e018180,0x6000000,0x0,0x6000000,0x6000000,0x6000000,0x6000000,0x6000000,0x6000000,0x0,0x0,0x6000000,0x6000000,0x6000000,0x6000000,0x6000000,0x6000000,0x6000000,0x6000000,0x6000000,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7e0001e,0x0,0x0,0x0,0x0,0x0,0x0,0x7e0001e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18186001,0x8000000,0x10000001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18186001,0x1800,0x0,0x0,0x8078000,0x0,0x0,0x0,0x8078000,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7e0,0x0,0x0,0x0,0x7e0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x60000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x505170c0,0x0,0x0,0x4000200,0x0,0x0,0x4000000,0x0,0x0,0x505170c0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x800000,0x0,0x800000,0x800000,0x100,0x82000000,0x100,0x0,0x0,0x800000,0x20,0x0,0x0,0x1000000,0x20,0x1000018,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000018,0x800000,0x0,0x0,0x500,0x20040000,0x20040000,0x82000000,0x500,0x0,0x800000,0x1000000,0x1000000,0x800000,0x0,0x0,0x800000,0x0,0x0,0x20000,0x0,0x208000,0x208000,0x20000,0x6,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x800,0x0,0x0,0x0,0x800,0x0,0x80000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x8000,0x8000,0x0,0x0,0x1000,0x0,0x20104,0x462b9,0x0,0x42,0x846,0x804,0x42,0x800,0x42,0x42,0x462b9,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x300000,0x0,0x0,0x0,0x0,0x0,0x300000,0x10000,0x0,0x0,0x21104,0x10000,0xc0021104,0x0,0x0,0x1c00000,0x0,0x0,0x0,0x0,0x0,0x0,0x1c00000,0xc0021104,0x300000,0x0,0x300000,0x0,0x400,0x400,0x0,0x0,0x0,0x300000,0x21104,0x21104,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x12000000,0x12000000,0x10020000,0x10020000,0x0,0x10020000,0x10020000,0x0,0x20000000,0x20000000,0x10000000,0x10000000,0x10000000,0x10000000,0x0,0x10020000,0x0,0x10020000,0x0,0x0,0x8000,0x0,0x40000,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x4000,0x0,0x1000000,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80008000,0x80008000,0x2008,0x0,0x2008,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0x8100800,0x0,0x0,0x0,0x8100800,0x80,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x80,0x2008,0x0,0x0,0x10000000,0x0,0x0,0x0,0x10000000,0x8,0x2008,0x0,0x0,0x40002008,0x0,0x8,0x40002008,0x80080000,0x80080000,0x80000,0x0,0x0,0x0,0x80000,0x40000,0x0,0x40000,0x0,0x0,0x40000,0x0,0x0,0x40000,0x1000,0x1000,0x0,0x0,0x630005,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x630005,0x0,0x0,0x0,0x4800102,0x4800102,0x4800002,0x4800002,0x40000,0x4800022,0x4800022,0x40000,0x100000,0x100000,0x24800102,0x24800102,0x4800042,0x4800042,0x0,0x4800022,0x0,0x4800022,0x0,0x608,0x0,0x8,0x0,0x608,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0x30501004,0x0,0x0,0x0,0x0,0x0,0x0,0x30501004,0x20500004,0x0,0x0,0x0,0x20500004,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20500004,0x0,0x20500004,0x21580084,0x21580084,0x20500004,0x0,0x20500004,0x20500004,0x400,0x0,0x400,0x400,0x400,0x20500004,0x20564005,0x0,0x4001,0x0,0x20564005,0x8200,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x8200,0x20501004,0x0,0x0,0x400,0x0,0x0,0x0,0x400,0x10,0x20501004,0x20500004,0x20500004,0x20500004,0x0,0x10,0x20500004,0x28500004,0x28500004,0x22501004,0x0,0x0,0x0,0x22501004,0x20500004,0x0,0x20500004,0x20700000,0x20700000,0x20500004,0x0,0x0,0x20500004,0x20500004,0x20500004,0x2051000c,0x2051000c,0x4d10844,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4d10844,0x2051000c,0x0,0x2051000c,0x20500004,0x20500004,0x22500004,0x22500004,0x20500004,0x2502,0x2502,0x20500004,0x22500024,0x22500024,0x20500004,0x20500004,0x20500004,0x20500004,0x20500004,0x2502,0x0,0x2502,0x20500004,0x20000000,0x0,0x0,0x0,0x20000000,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x3,0xc,0x3c,0x800,0x800,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20001400,0x7e000,0x0,0x0,0x0,0x0,0x0,0x20001400,0x400,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00,0x0,0xc00,0x400,0x400,0x400,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x400,0x20000400,0x0,0x0,0x0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x0,0x20000400,0x20001400,0xc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20001400,0x400,0x400,0x20001400,0x14000000,0x0,0x20001400,0x400,0x400,0x1400,0x780000,0x0,0x0,0x1400,0x400,0x0,0x400,0x400,0x400,0x400,0x0,0x0,0x400,0x400,0x400,0x400,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x1400,0x3800000,0x1400,0x400,0x400,0x400,0x400,0x400,0x0,0x0,0x400,0x400,0x400,0x400,0x400,0x400,0x400,0x400,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfff0,0x0,0x0,0x30000,0x300000,0xc00000,0xc000000,0xfff0,0x10000000,0x60000000,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_8() {
      jj_la1_8 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x13fe,0x13fe,0x0,0x6000,0x18000,0xc0000,0xc00000,0xc00,0x18000,0xc00,0x0,0x0,0x0,0x0,0x0,0x1000000,0x7e000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x50000000,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_9() {
      jj_la1_9 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x0,0x0,0x0,0x0,0x80000,0x0,0x80000,0x80000,0x80000,0x0,0x80000,0x3,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x88420,0x200,0xc0,0x4000,0x1800,0x40000,0x3c00000,0x3c00000,0x88420,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x78000000,0x4000000,0x0,0x80000,0x0,0x0,0x0,0x80000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MxParser_mxJPO(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MxParser_mxJPO(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MxParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MxParser_mxJPO(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MxParserTokenManager_mxJPO(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new MxParserTokenManager_mxJPO(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MxParser_mxJPO(MxParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MxParserTokenManager_mxJPO tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[319];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 144; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 319; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
